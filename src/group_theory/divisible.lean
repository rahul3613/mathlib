/-
Copyright (c) 2022 Jujian Zhang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jujian Zhang
-/
import group_theory.subgroup.pointwise
import group_theory.quotient_group
import algebra.group.pi

/-!
# Divisible Group and rootable group

> THIS FILE IS SYNCHRONIZED WITH MATHLIB4.
> Any changes to this file require a corresponding PR to mathlib4.

In this file, we define a divisible add monoid and a rootable monoid with some basic properties.

## Main definition

* `divisible_by A Œ±`: An additive monoid `A` is said to be divisible by `Œ±` iff for all `n ‚â† 0 ‚àà Œ±`
  and `y ‚àà A`, there is an `x ‚àà A` such that `n ‚Ä¢ x = y`. In this file, we adopt a constructive
  approach, i.e. we ask for an explicit `div : A ‚Üí Œ± ‚Üí A` function such that `div a 0 = 0` and
  `n ‚Ä¢ div a n = a` for all `n ‚â† 0 ‚àà Œ±`.
* `rootable_by A Œ±`: A monoid `A` is said to be rootable by `Œ±` iff for all `n ‚â† 0 ‚àà Œ±` and `y ‚àà A`,
  there is an `x ‚àà A` such that `x^n = y`. In this file, we adopt a constructive approach, i.e. we
  ask for an explicit `root : A ‚Üí Œ± ‚Üí A` function such that `root a 0 = 1` and `(root a n)‚Åø = a` for
  all `n ‚â† 0 ‚àà Œ±`.

## Main results

For additive monoids and groups:

* `divisible_by_of_smul_right_surj` : the constructive definition of divisiblity is implied by
  the condition that `n ‚Ä¢ x = a` has solutions for all `n ‚â† 0` and `a ‚àà A`.
* `smul_right_surj_of_divisible_by` : the constructive definition of divisiblity implies
  the condition that `n ‚Ä¢ x = a` has solutions for all `n ‚â† 0` and `a ‚àà A`.
* `prod.divisible_by` : `A √ó B` is divisible for any two divisible additive monoids.
* `pi.divisible_by` : any product of divisble additive monoids is divisible.
* `add_group.divisible_by_int_of_divisible_by_nat` : for additive groups, int divisiblity is implied
  by nat divisiblity.
* `add_group.divisible_by_nat_of_divisible_by_int` : for additive groups, nat divisiblity is implied
  by int divisiblity.
* `add_comm_group.divisible_by_int_of_smul_top_eq_top`: the constructive definition of divisiblity
  is implied by the condition that `n ‚Ä¢ A = A` for all `n ‚â† 0`.
* `add_comm_group.smul_top_eq_top_of_divisible_by_int`: the constructive definition of divisiblity
  implies the condition that `n ‚Ä¢ A = A` for all `n ‚â† 0`.
* `divisible_by_int_of_char_zero` : any field of characteristic zero is divisible.
* `quotient_add_group.divisible_by` : quotient group of divisible group is divisible.
* `function.surjective.divisible_by` : if `A` is divisible and `A ‚Üí+ B` is surjective, then `B`
  is divisible.

and their multiplicative counterparts:

* `rootable_by_of_pow_left_surj` : the constructive definition of rootablity is implied by the
  condition that `x‚Åø = y` has solutions for all `n ‚â† 0` and `a ‚àà A`.
* `pow_left_surj_of_rootable_by` : the constructive definition of rootablity implies the
  condition that `x‚Åø = y` has solutions for all `n ‚â† 0` and `a ‚àà A`.
* `prod.rootable_by` : any product of two rootable monoids is rootable.
* `pi.rootable_by` : any product of rootable monoids is rootable.
* `group.rootable_by_int_of_rootable_by_nat` : in groups, int rootablity is implied by nat
  rootablity.
* `group.rootable_by_nat_of_rootable_by_int` : in groups, nat rootablity is implied by int
  rootablity.
* `quotient_group.rootable_by` : quotient group of rootable group is rootable.
* `function.surjective.rootable_by` : if `A` is rootable and `A ‚Üí* B` is surjective, then `B` is
  rootable.

TODO: Show that divisibility implies injectivity in the category of `AddCommGroup`.
-/

open_locale pointwise

section add_monoid

variables (A Œ± : Type*) [add_monoid A] [has_smul Œ± A] [has_zero Œ±]

/--
An `add_monoid A` is `Œ±`-divisible iff `n ‚Ä¢ x = a` has a solution for all `n ‚â† 0 ‚àà Œ±` and `a ‚àà A`.
Here we adopt a constructive approach where we ask an explicit `div : A ‚Üí Œ± ‚Üí A` function such that
* `div a 0 = 0` for all `a ‚àà A`
* `n ‚Ä¢ div a n = a` for all `n ‚â† 0 ‚àà Œ±` and `a ‚àà A`.
-/
class divisible_by :=
(div : A ‚Üí Œ± ‚Üí A)
(div_zero : ‚àÄ a, div a 0 = 0)
(div_cancel : ‚àÄ {n : Œ±} (a : A), n ‚â† 0 ‚Üí n ‚Ä¢ (div a n) = a)

end add_monoid

section monoid

variables (A Œ± : Type*) [monoid A] [has_pow A Œ±] [has_zero Œ±]

/--
A `monoid A` is `Œ±`-rootable iff `x‚Åø = a` has a solution for all `n ‚â† 0 ‚àà Œ±` and `a ‚àà A`.
Here we adopt a constructive approach where we ask an explicit `root : A ‚Üí Œ± ‚Üí A` function such that
* `root a 0 = 1` for all `a ‚àà A`
* `(root a n)‚Åø = a` for all `n ‚â† 0 ‚àà Œ±` and `a ‚àà A`.
-/
@[to_additive]
class rootable_by :=
(root : A ‚Üí Œ± ‚Üí A)
(root_zero : ‚àÄ a, root a 0 = 1)
(root_cancel : ‚àÄ {n : Œ±} (a : A), n ‚â† 0 ‚Üí (root a n)^n = a)

@[to_additive smul_right_surj_of_divisible_by]
lemma pow_left_surj_of_rootable_by [rootable_by A Œ±] {n : Œ±} (hn : n ‚â† 0) :
  function.surjective (Œª a, pow a n : A ‚Üí A) :=
Œª x, ‚ü®rootable_by.root x n, rootable_by.root_cancel _ hn‚ü©

/--
A `monoid A` is `Œ±`-rootable iff the `pow _ n` function is surjective, i.e. the constructive version
implies the textbook approach.
-/
@[to_additive divisible_by_of_smul_right_surj
"An `add_monoid A` is `Œ±`-divisible iff `n ‚Ä¢ _` is a surjective function, i.e. the constructive
version implies the textbook approach."]
noncomputable def rootable_by_of_pow_left_surj
  (H : ‚àÄ {n : Œ±}, n ‚â† 0 ‚Üí function.surjective (Œª a, a^n : A ‚Üí A)) :
rootable_by A Œ± :=
{ root := Œª a n, @dite _ (n = 0) (classical.dec _) (Œª _, (1 : A)) (Œª hn, (H hn a).some),
  root_zero := Œª _, by classical; exact dif_pos rfl,
  root_cancel := Œª n a hn, by { classical, rw dif_neg hn, exact (H hn a).some_spec } }

section pi

variables {Œπ Œ≤ : Type*} (B : Œπ ‚Üí Type*) [Œ† (i : Œπ), has_pow (B i) Œ≤]
variables [has_zero Œ≤] [Œ† (i : Œπ), monoid (B i)] [Œ† i, rootable_by (B i) Œ≤]

@[to_additive]
instance pi.rootable_by : rootable_by (Œ† i, B i) Œ≤ :=
{ root := Œª x n i, rootable_by.root (x i) n,
  root_zero := Œª x, funext $ Œª i, rootable_by.root_zero _,
  root_cancel := Œª n x hn, funext $ Œª i, rootable_by.root_cancel _ hn }

end pi

section prod

variables {Œ≤ B B' : Type*} [has_pow B Œ≤] [has_pow B' Œ≤]
variables [has_zero Œ≤] [monoid B] [monoid B'] [rootable_by B Œ≤] [rootable_by B' Œ≤]

@[to_additive]
instance prod.rootable_by : rootable_by (B √ó B') Œ≤ :=
{ root := Œª p n, (rootable_by.root p.1 n, rootable_by.root p.2 n),
  root_zero := Œª p, prod.ext (rootable_by.root_zero _) (rootable_by.root_zero _),
  root_cancel := Œª n p hn, prod.ext (rootable_by.root_cancel _ hn) (rootable_by.root_cancel _ hn) }

end prod

end monoid

namespace add_comm_group

variables (A : Type*) [add_comm_group A]

lemma smul_top_eq_top_of_divisible_by_int [divisible_by A ‚Ñ§] {n : ‚Ñ§} (hn : n ‚â† 0) :
  n ‚Ä¢ (‚ä§ : add_subgroup A) = ‚ä§ :=
add_subgroup.map_top_of_surjective _ $ Œª a, ‚ü®divisible_by.div a n, divisible_by.div_cancel _ hn‚ü©

/--
If for all `n ‚â† 0 ‚àà ‚Ñ§`, `n ‚Ä¢ A = A`, then `A` is divisible.
-/
noncomputable def divisible_by_int_of_smul_top_eq_top
  (H : ‚àÄ {n : ‚Ñ§} (hn : n ‚â† 0), n ‚Ä¢ (‚ä§ : add_subgroup A) = ‚ä§) :
  divisible_by A ‚Ñ§ :=
{ div := Œª a n, if hn : n = 0 then 0 else
    (show a ‚àà n ‚Ä¢ (‚ä§ : add_subgroup A), by rw [H hn]; trivial).some,
  div_zero := Œª a, dif_pos rfl,
  div_cancel := Œª n a hn, begin
    rw [dif_neg hn],
    generalize_proofs h1,
    exact h1.some_spec.2,
  end }

end add_comm_group

@[priority 100]
instance divisible_by_int_of_char_zero {ùïú} [division_ring ùïú] [char_zero ùïú] : divisible_by ùïú ‚Ñ§ :=
{ div := Œª q n, q / n,
  div_zero := Œª q, by norm_num,
  div_cancel := Œª n q hn,
    by rw [zsmul_eq_mul, (int.cast_commute n _).eq, div_mul_cancel q (int.cast_ne_zero.mpr hn)] }

namespace group

variables (A : Type*) [group A]

/--
A group is `‚Ñ§`-rootable if it is `‚Ñï`-rootable.
-/
@[to_additive add_group.divisible_by_int_of_divisible_by_nat
"An additive group is `‚Ñ§`-divisible if it is `‚Ñï`-divisible."]
def rootable_by_int_of_rootable_by_nat [rootable_by A ‚Ñï] : rootable_by A ‚Ñ§ :=
{ root := Œª a z, match z with
  | (n : ‚Ñï) := rootable_by.root a n
  | -[1+n] := (rootable_by.root a (n + 1))‚Åª¬π
  end,
  root_zero := Œª a, rootable_by.root_zero a,
  root_cancel := Œª n a hn, begin
    induction n,
    { change (rootable_by.root a _) ^ _ = a,
      norm_num,
      rw [rootable_by.root_cancel],
      rw [int.of_nat_eq_coe] at hn,
      exact_mod_cast hn, },
    { change ((rootable_by.root a _) ‚Åª¬π)^_ = a,
      norm_num,
      rw [rootable_by.root_cancel],
      norm_num, }
  end}

/--A group is `‚Ñï`-rootable if it is `‚Ñ§`-rootable
-/
@[to_additive add_group.divisible_by_nat_of_divisible_by_int
"An additive group is `‚Ñï`-divisible if it `‚Ñ§`-divisible."]
def rootable_by_nat_of_rootable_by_int [rootable_by A ‚Ñ§] : rootable_by A ‚Ñï :=
{ root := Œª a n, rootable_by.root a (n : ‚Ñ§),
  root_zero := Œª a, rootable_by.root_zero a,
  root_cancel := Œª n a hn, begin
    have := rootable_by.root_cancel a (show (n : ‚Ñ§) ‚â† 0, by exact_mod_cast hn),
    norm_num at this,
    exact this,
  end }

end group

section hom

variables {Œ± A B : Type*}
variables [has_zero Œ±] [monoid A] [monoid B] [has_pow A Œ±] [has_pow B Œ±] [rootable_by A Œ±]
variables (f : A ‚Üí B)

/--
If `f : A ‚Üí B` is a surjective homomorphism and `A` is `Œ±`-rootable, then `B` is also `Œ±`-rootable.
-/
@[to_additive "If `f : A ‚Üí B` is a surjective homomorphism and
`A` is `Œ±`-divisible, then `B` is also `Œ±`-divisible."]
noncomputable def function.surjective.rootable_by (hf : function.surjective f)
  (hpow : ‚àÄ (a : A) (n : Œ±), f (a ^ n) = f a ^ n) : rootable_by B Œ± :=
rootable_by_of_pow_left_surj _ _ $ Œª n hn x,
  let ‚ü®y, hy‚ü© := hf x in ‚ü®f $ rootable_by.root y n, (by rw [‚Üêhpow (rootable_by.root y n) n,
    rootable_by.root_cancel _ hn, hy] : _ ^ _ = x)‚ü©

@[to_additive divisible_by.surjective_smul]
lemma rootable_by.surjective_pow
  (A Œ± : Type*) [monoid A] [has_pow A Œ±] [has_zero Œ±] [rootable_by A Œ±] {n : Œ±} (hn : n ‚â† 0) :
  function.surjective (Œª (a : A), a^n) :=
Œª a, ‚ü®rootable_by.root a n, rootable_by.root_cancel a hn‚ü©

end hom

section quotient

variables (Œ± : Type*) {A : Type*} [comm_group A] (B : subgroup A)

/-- Any quotient group of a rootable group is rootable. -/
@[to_additive quotient_add_group.divisible_by
"Any quotient group of a divisible group is divisible"]
noncomputable instance quotient_group.rootable_by [rootable_by A ‚Ñï] : rootable_by (A ‚ß∏ B) ‚Ñï :=
quotient_group.mk_surjective.rootable_by _ $ Œª _ _, rfl

end quotient
