/-
Copyright (c) 2023 Antoine Labelle. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Antoine Labelle
-/
import combinatorics.quiver.cast
import combinatorics.quiver.symmetric

/-!
# Single-object quiver

> THIS FILE IS SYNCHRONIZED WITH MATHLIB4.
> Any changes to this file require a corresponding PR to mathlib4.

Single object quiver with a given arrows type.

## Main definitions

Given a type `Œ±`, `single_obj Œ±` is the `unit` type, whose single object is called `star Œ±`, with
`quiver` structure such that `star Œ± ‚ü∂ star Œ±` is the type `Œ±`.
An element `x : Œ±` can be reinterpreted as an element of `star Œ± ‚ü∂ star Œ±` using
`to_hom`.
More generally, a list of elements of `a` can be reinterpreted as a path from `star Œ±` to
itself using `path_equiv_list`.
-/

namespace quiver

/-- Type tag on `unit` used to define single-object quivers. -/
@[derive unique, nolint unused_arguments]
def single_obj (Œ± : Type*) : Type := unit

namespace single_obj

variables (Œ± Œ≤ Œ≥ : Type*)

instance : quiver (single_obj Œ±) := ‚ü®Œª _ _, Œ±‚ü©

/-- The single object in `single_obj Œ±`. -/
def star : single_obj Œ± := unit.star

instance : inhabited (single_obj Œ±) := ‚ü®star Œ±‚ü©

variables {Œ± Œ≤ Œ≥}

/-- Equip `single_obj Œ±` with a reverse operation. -/
@[reducible] -- See note [reducible non-instances]
def has_reverse (rev : Œ± ‚Üí Œ±) : has_reverse (single_obj Œ±) := ‚ü®Œª _ _, rev‚ü©

/-- Equip `single_obj Œ±` with an involutive reverse operation. -/
@[reducible] -- See note [reducible non-instances]
def has_involutive_reverse (rev : Œ± ‚Üí Œ±) (h : function.involutive rev) :
  has_involutive_reverse (single_obj Œ±) :=
{ to_has_reverse := has_reverse rev,
  inv' := Œª _ _, h}

/-- The type of arrows from `star Œ±` to itself is equivalent to the original type `Œ±`. -/
@[simps] def to_hom : Œ± ‚âÉ (star Œ± ‚ü∂ star Œ±) := equiv.refl _

/--
Prefunctors between two `single_obj` quivers correspond to functions between the corresponding
arrows types.
-/
@[simps] def to_prefunctor :
  (Œ± ‚Üí Œ≤) ‚âÉ (single_obj Œ± ‚•§q single_obj Œ≤) :=
{ to_fun := Œª f, ‚ü®id, Œª _ _, f‚ü©,
  inv_fun := Œª f a, f.map (to_hom a),
  left_inv := Œª _, rfl,
  right_inv :=  Œª f, by cases f; obviously }

lemma to_prefunctor_id : to_prefunctor id = ùü≠q (single_obj Œ±) := rfl

@[simp] lemma to_prefunctor_symm_id :
  to_prefunctor.symm (ùü≠q (single_obj Œ±)) = id := rfl

lemma to_prefunctor_comp (f : Œ± ‚Üí Œ≤) (g : Œ≤ ‚Üí Œ≥) :
  to_prefunctor (g ‚àò f) = to_prefunctor f ‚ãôq to_prefunctor g := rfl

@[simp] lemma to_prefunctor_symm_comp (f : single_obj Œ± ‚•§q single_obj Œ≤)
  (g : single_obj Œ≤ ‚•§q single_obj Œ≥) : to_prefunctor.symm (f ‚ãôq g) =
  to_prefunctor.symm g ‚àò to_prefunctor.symm f :=
by simp only [equiv.symm_apply_eq, to_prefunctor_comp, equiv.apply_symm_apply]

/--
Auxiliary definition for `quiver.single_obj.path_equiv_list`.
Converts a path in the quiver `single_obj Œ±` into a list of elements of type `a`.
-/
@[simp] def path_to_list : Œ† {x : single_obj Œ±}, path (star Œ±) x ‚Üí list Œ±
| _ path.nil := []
| _ (path.cons p a) := a :: path_to_list p

/--
Auxiliary definition for `quiver.single_obj.path_equiv_list`.
Converts a list of elements of type `Œ±` into a path in the quiver `single_obj Œ±`.
-/
@[simp] def list_to_path : list Œ± ‚Üí path (star Œ±) (star Œ±)
| [] := path.nil
| (a :: l) := (list_to_path l).cons a

lemma path_to_list_to_path {x : single_obj Œ±} (p : path (star Œ±) x) :
  list_to_path (path_to_list p) = p.cast rfl (unit.ext) :=
by { induction p with y z p a ih, refl, tidy, }

lemma list_to_path_to_list (l : list Œ±) :
  path_to_list (list_to_path l) = l :=
by { induction l with a l ih, refl, simp [ih] }

/-- Paths in `single_obj Œ±` quiver correspond to lists of elements of type `Œ±`. -/
def path_equiv_list : path (star Œ±) (star Œ±) ‚âÉ list Œ± :=
‚ü®path_to_list, list_to_path, Œª p, path_to_list_to_path p, list_to_path_to_list‚ü©

@[simp] lemma path_equiv_list_nil : path_equiv_list path.nil = ([] : list Œ±) := rfl

@[simp] lemma path_equiv_list_cons (p : path (star Œ±) (star Œ±)) (a : star Œ± ‚ü∂ star Œ±) :
  path_equiv_list (path.cons p a) =  a :: path_to_list p := rfl

@[simp] lemma path_equiv_list_symm_nil : path_equiv_list.symm ([] : list Œ±) = path.nil := rfl

@[simp] lemma path_equiv_list_symm_cons (l : list Œ±) (a : Œ±) :
  path_equiv_list.symm (a :: l) =  path.cons (path_equiv_list.symm l) a := rfl

end single_obj

end quiver
