/-
Copyright (c) 2018 Patrick Massot. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Patrick Massot, Johannes H√∂lzl
-/
import algebra.algebra.subalgebra.basic
import analysis.normed.group.basic
import topology.instances.ennreal

/-!
# Normed fields

> THIS FILE IS SYNCHRONIZED WITH MATHLIB4.
> Any changes to this file require a corresponding PR to mathlib4.

In this file we define (semi)normed rings and fields. We also prove some theorems about these
definitions.
-/

variables {Œ± : Type*} {Œ≤ : Type*} {Œ≥ : Type*} {Œπ : Type*}

open filter metric
open_locale topology big_operators nnreal ennreal uniformity pointwise

/-- A non-unital seminormed ring is a not-necessarily-unital ring
endowed with a seminorm which satisfies the inequality `‚Äñx y‚Äñ ‚â§ ‚Äñx‚Äñ ‚Äñy‚Äñ`. -/
class non_unital_semi_normed_ring (Œ± : Type*)
  extends has_norm Œ±, non_unital_ring Œ±, pseudo_metric_space Œ± :=
(dist_eq : ‚àÄ x y, dist x y = norm (x - y))
(norm_mul : ‚àÄ a b, norm (a * b) ‚â§ norm a * norm b)

/-- A seminormed ring is a ring endowed with a seminorm which satisfies the inequality
`‚Äñx y‚Äñ ‚â§ ‚Äñx‚Äñ ‚Äñy‚Äñ`. -/
class semi_normed_ring (Œ± : Type*) extends has_norm Œ±, ring Œ±, pseudo_metric_space Œ± :=
(dist_eq : ‚àÄ x y, dist x y = norm (x - y))
(norm_mul : ‚àÄ a b, norm (a * b) ‚â§ norm a * norm b)

/-- A seminormed ring is a non-unital seminormed ring. -/
@[priority 100] -- see Note [lower instance priority]
instance semi_normed_ring.to_non_unital_semi_normed_ring [Œ≤ : semi_normed_ring Œ±] :
  non_unital_semi_normed_ring Œ± :=
{ ..Œ≤ }

/-- A non-unital normed ring is a not-necessarily-unital ring
endowed with a norm which satisfies the inequality `‚Äñx y‚Äñ ‚â§ ‚Äñx‚Äñ ‚Äñy‚Äñ`. -/
class non_unital_normed_ring (Œ± : Type*) extends has_norm Œ±, non_unital_ring Œ±, metric_space Œ± :=
(dist_eq : ‚àÄ x y, dist x y = norm (x - y))
(norm_mul : ‚àÄ a b, norm (a * b) ‚â§ norm a * norm b)

/-- A non-unital normed ring is a non-unital seminormed ring. -/
@[priority 100] -- see Note [lower instance priority]
instance non_unital_normed_ring.to_non_unital_semi_normed_ring [Œ≤ : non_unital_normed_ring Œ±] :
  non_unital_semi_normed_ring Œ± :=
{ ..Œ≤ }

/-- A normed ring is a ring endowed with a norm which satisfies the inequality `‚Äñx y‚Äñ ‚â§ ‚Äñx‚Äñ ‚Äñy‚Äñ`. -/
class normed_ring (Œ± : Type*) extends has_norm Œ±, ring Œ±, metric_space Œ± :=
(dist_eq : ‚àÄ x y, dist x y = norm (x - y))
(norm_mul : ‚àÄ a b, norm (a * b) ‚â§ norm a * norm b)

/-- A normed division ring is a division ring endowed with a seminorm which satisfies the equality
`‚Äñx y‚Äñ = ‚Äñx‚Äñ ‚Äñy‚Äñ`. -/
class normed_division_ring (Œ± : Type*) extends has_norm Œ±, division_ring Œ±, metric_space Œ± :=
(dist_eq : ‚àÄ x y, dist x y = norm (x - y))
(norm_mul' : ‚àÄ a b, norm (a * b) = norm a * norm b)

/-- A normed division ring is a normed ring. -/
@[priority 100] -- see Note [lower instance priority]
instance normed_division_ring.to_normed_ring [Œ≤ : normed_division_ring Œ±] : normed_ring Œ± :=
{ norm_mul := Œª a b, (normed_division_ring.norm_mul' a b).le,
  ..Œ≤ }

/-- A normed ring is a seminormed ring. -/
@[priority 100] -- see Note [lower instance priority]
instance normed_ring.to_semi_normed_ring [Œ≤ : normed_ring Œ±] : semi_normed_ring Œ± :=
{ ..Œ≤ }

/-- A normed ring is a non-unital normed ring. -/
@[priority 100] -- see Note [lower instance priority]
instance normed_ring.to_non_unital_normed_ring [Œ≤ : normed_ring Œ±] : non_unital_normed_ring Œ± :=
{ ..Œ≤ }

/-- A seminormed commutative ring is a commutative ring endowed with a seminorm which satisfies
the inequality `‚Äñx y‚Äñ ‚â§ ‚Äñx‚Äñ ‚Äñy‚Äñ`. -/
class semi_normed_comm_ring (Œ± : Type*) extends semi_normed_ring Œ± :=
(mul_comm : ‚àÄ x y : Œ±, x * y = y * x)

/-- A normed commutative ring is a commutative ring endowed with a norm which satisfies
the inequality `‚Äñx y‚Äñ ‚â§ ‚Äñx‚Äñ ‚Äñy‚Äñ`. -/
class normed_comm_ring (Œ± : Type*) extends normed_ring Œ± :=
(mul_comm : ‚àÄ x y : Œ±, x * y = y * x)

/-- A normed commutative ring is a seminormed commutative ring. -/
@[priority 100] -- see Note [lower instance priority]
instance normed_comm_ring.to_semi_normed_comm_ring [Œ≤ : normed_comm_ring Œ±] :
  semi_normed_comm_ring Œ± := { ..Œ≤ }

instance : normed_comm_ring punit :=
{ norm_mul := Œª _ _, by simp,
  ..punit.normed_add_comm_group,
  ..punit.comm_ring, }

/-- A mixin class with the axiom `‚Äñ1‚Äñ = 1`. Many `normed_ring`s and all `normed_field`s satisfy this
axiom. -/
class norm_one_class (Œ± : Type*) [has_norm Œ±] [has_one Œ±] : Prop :=
(norm_one : ‚Äñ(1:Œ±)‚Äñ = 1)

export norm_one_class (norm_one)

attribute [simp] norm_one

@[simp] lemma nnnorm_one [seminormed_add_comm_group Œ±] [has_one Œ±] [norm_one_class Œ±] :
  ‚Äñ(1 : Œ±)‚Äñ‚Çä = 1 :=
nnreal.eq norm_one

lemma norm_one_class.nontrivial (Œ± : Type*) [seminormed_add_comm_group Œ±] [has_one Œ±]
  [norm_one_class Œ±] :
  nontrivial Œ± :=
nontrivial_of_ne 0 1 $ ne_of_apply_ne norm $ by simp

@[priority 100] -- see Note [lower instance priority]
instance semi_normed_comm_ring.to_comm_ring [Œ≤ : semi_normed_comm_ring Œ±] : comm_ring Œ± := { ..Œ≤ }

@[priority 100] -- see Note [lower instance priority]
instance non_unital_normed_ring.to_normed_add_comm_group [Œ≤ : non_unital_normed_ring Œ±] :
  normed_add_comm_group Œ± :=
{ ..Œ≤ }

@[priority 100] -- see Note [lower instance priority]
instance non_unital_semi_normed_ring.to_seminormed_add_comm_group [non_unital_semi_normed_ring Œ±] :
  seminormed_add_comm_group Œ± := { ..‚Äπnon_unital_semi_normed_ring Œ±‚Ä∫ }

instance [seminormed_add_comm_group Œ±] [has_one Œ±] [norm_one_class Œ±] : norm_one_class (ulift Œ±) :=
‚ü®by simp [ulift.norm_def]‚ü©

instance prod.norm_one_class [seminormed_add_comm_group Œ±] [has_one Œ±] [norm_one_class Œ±]
  [seminormed_add_comm_group Œ≤] [has_one Œ≤] [norm_one_class Œ≤] :
  norm_one_class (Œ± √ó Œ≤) :=
‚ü®by simp [prod.norm_def]‚ü©

instance pi.norm_one_class {Œπ : Type*} {Œ± : Œπ ‚Üí Type*} [nonempty Œπ] [fintype Œπ]
  [Œ† i, seminormed_add_comm_group (Œ± i)] [Œ† i, has_one (Œ± i)] [‚àÄ i, norm_one_class (Œ± i)] :
  norm_one_class (Œ† i, Œ± i) :=
‚ü®by simp [pi.norm_def, finset.sup_const finset.univ_nonempty]‚ü©

instance mul_opposite.norm_one_class [seminormed_add_comm_group Œ±] [has_one Œ±] [norm_one_class Œ±] :
  norm_one_class Œ±·µê·µí·µñ :=
‚ü®@norm_one Œ± _ _ _‚ü©

section non_unital_semi_normed_ring
variables [non_unital_semi_normed_ring Œ±]

lemma norm_mul_le (a b : Œ±) : (‚Äña*b‚Äñ) ‚â§ (‚Äña‚Äñ) * (‚Äñb‚Äñ) :=
non_unital_semi_normed_ring.norm_mul _ _

lemma nnnorm_mul_le (a b : Œ±) : ‚Äña * b‚Äñ‚Çä ‚â§ ‚Äña‚Äñ‚Çä * ‚Äñb‚Äñ‚Çä :=
by simpa only [‚Üênorm_to_nnreal, ‚Üêreal.to_nnreal_mul (norm_nonneg _)]
  using real.to_nnreal_mono (norm_mul_le _ _)

lemma one_le_norm_one (Œ≤) [normed_ring Œ≤] [nontrivial Œ≤] : 1 ‚â§ ‚Äñ(1 : Œ≤)‚Äñ :=
(le_mul_iff_one_le_left $ norm_pos_iff.mpr (one_ne_zero : (1 : Œ≤) ‚â† 0)).mp
  (by simpa only [mul_one] using norm_mul_le (1 : Œ≤) 1)

lemma one_le_nnnorm_one (Œ≤) [normed_ring Œ≤] [nontrivial Œ≤] : 1 ‚â§ ‚Äñ(1 : Œ≤)‚Äñ‚Çä :=
one_le_norm_one Œ≤

lemma filter.tendsto.zero_mul_is_bounded_under_le {f g : Œπ ‚Üí Œ±} {l : filter Œπ}
  (hf : tendsto f l (ùìù 0)) (hg : is_bounded_under (‚â§) l (norm ‚àò g)) :
  tendsto (Œª x, f x * g x) l (ùìù 0) :=
hf.op_zero_is_bounded_under_le hg (*) norm_mul_le

lemma filter.is_bounded_under_le.mul_tendsto_zero {f g : Œπ ‚Üí Œ±} {l : filter Œπ}
  (hf : is_bounded_under (‚â§) l (norm ‚àò f)) (hg : tendsto g l (ùìù 0)) :
  tendsto (Œª x, f x * g x) l (ùìù 0) :=
hg.op_zero_is_bounded_under_le hf (flip (*)) (Œª x y, ((norm_mul_le y x).trans_eq (mul_comm _ _)))

/-- In a seminormed ring, the left-multiplication `add_monoid_hom` is bounded. -/
lemma mul_left_bound (x : Œ±) :
  ‚àÄ (y:Œ±), ‚Äñadd_monoid_hom.mul_left x y‚Äñ ‚â§ ‚Äñx‚Äñ * ‚Äñy‚Äñ :=
norm_mul_le x

/-- In a seminormed ring, the right-multiplication `add_monoid_hom` is bounded. -/
lemma mul_right_bound (x : Œ±) :
  ‚àÄ (y:Œ±), ‚Äñadd_monoid_hom.mul_right x y‚Äñ ‚â§ ‚Äñx‚Äñ * ‚Äñy‚Äñ :=
Œª y, by {rw mul_comm, convert norm_mul_le y x}

instance : non_unital_semi_normed_ring (ulift Œ±) :=
{ norm_mul := Œª x y, (norm_mul_le x.down y.down : _),
  .. ulift.seminormed_add_comm_group }

/-- Non-unital seminormed ring structure on the product of two non-unital seminormed rings,
  using the sup norm. -/
instance prod.non_unital_semi_normed_ring [non_unital_semi_normed_ring Œ≤] :
  non_unital_semi_normed_ring (Œ± √ó Œ≤) :=
{ norm_mul := assume x y,
  calc
    ‚Äñx * y‚Äñ = ‚Äñ(x.1*y.1, x.2*y.2)‚Äñ : rfl
        ... = (max ‚Äñx.1*y.1‚Äñ  ‚Äñx.2*y.2‚Äñ) : rfl
        ... ‚â§ (max (‚Äñx.1‚Äñ*‚Äñy.1‚Äñ) (‚Äñx.2‚Äñ*‚Äñy.2‚Äñ)) :
          max_le_max (norm_mul_le (x.1) (y.1)) (norm_mul_le (x.2) (y.2))
        ... = (max (‚Äñx.1‚Äñ*‚Äñy.1‚Äñ) (‚Äñy.2‚Äñ*‚Äñx.2‚Äñ)) : by simp[mul_comm]
        ... ‚â§ (max (‚Äñx.1‚Äñ) (‚Äñx.2‚Äñ)) * (max (‚Äñy.2‚Äñ) (‚Äñy.1‚Äñ)) :
          by apply max_mul_mul_le_max_mul_max; simp [norm_nonneg]
        ... = (max (‚Äñx.1‚Äñ) (‚Äñx.2‚Äñ)) * (max (‚Äñy.1‚Äñ) (‚Äñy.2‚Äñ)) : by simp [max_comm]
        ... = (‚Äñx‚Äñ*‚Äñy‚Äñ) : rfl,
  ..prod.seminormed_add_comm_group }

/-- Non-unital seminormed ring structure on the product of finitely many non-unital seminormed
rings, using the sup norm. -/
instance pi.non_unital_semi_normed_ring {œÄ : Œπ ‚Üí Type*} [fintype Œπ]
  [Œ† i, non_unital_semi_normed_ring (œÄ i)] :
  non_unital_semi_normed_ring (Œ† i, œÄ i) :=
{ norm_mul := Œª x y, nnreal.coe_mono $
    calc  finset.univ.sup (Œª i, ‚Äñx i * y i‚Äñ‚Çä)
        ‚â§ finset.univ.sup ((Œª i, ‚Äñx i‚Äñ‚Çä) * (Œª i, ‚Äñy i‚Äñ‚Çä)) :
            finset.sup_mono_fun $ Œª b hb, norm_mul_le _ _
    ... ‚â§ finset.univ.sup (Œª i, ‚Äñx i‚Äñ‚Çä) * finset.univ.sup (Œª i, ‚Äñy i‚Äñ‚Çä) :
            finset.sup_mul_le_mul_sup_of_nonneg _ (Œª i _, zero_le _) (Œª i _, zero_le _),
  ..pi.seminormed_add_comm_group }

instance mul_opposite.non_unital_semi_normed_ring : non_unital_semi_normed_ring Œ±·µê·µí·µñ :=
{ norm_mul := mul_opposite.rec $ Œª x, mul_opposite.rec $ Œª y,
    (norm_mul_le y x).trans_eq (mul_comm _ _),
  ..mul_opposite.seminormed_add_comm_group }

end non_unital_semi_normed_ring

section semi_normed_ring

variables [semi_normed_ring Œ±]

/-- A subalgebra of a seminormed ring is also a seminormed ring, with the restriction of the norm.

See note [implicit instance arguments]. -/
instance subalgebra.semi_normed_ring {ùïú : Type*} {_ : comm_ring ùïú}
  {E : Type*} [semi_normed_ring E] {_ : algebra ùïú E} (s : subalgebra ùïú E) : semi_normed_ring s :=
{ norm_mul := Œª a b, norm_mul_le a.1 b.1,
  ..s.to_submodule.seminormed_add_comm_group }

/-- A subalgebra of a normed ring is also a normed ring, with the restriction of the norm.

See note [implicit instance arguments]. -/
instance subalgebra.normed_ring {ùïú : Type*} {_ : comm_ring ùïú}
  {E : Type*} [normed_ring E] {_ : algebra ùïú E} (s : subalgebra ùïú E) : normed_ring s :=
{ ..s.semi_normed_ring }

lemma nat.norm_cast_le : ‚àÄ n : ‚Ñï, ‚Äñ(n : Œ±)‚Äñ ‚â§ n * ‚Äñ(1 : Œ±)‚Äñ
| 0 := by simp
| (n + 1) := by { rw [n.cast_succ, n.cast_succ, add_mul, one_mul],
                  exact norm_add_le_of_le (nat.norm_cast_le n) le_rfl }

lemma list.norm_prod_le' : ‚àÄ {l : list Œ±}, l ‚â† [] ‚Üí ‚Äñl.prod‚Äñ ‚â§ (l.map norm).prod
| [] h := (h rfl).elim
| [a] _ := by simp
| (a :: b :: l) _ :=
  begin
    rw [list.map_cons, list.prod_cons, @list.prod_cons _ _ _ ‚Äña‚Äñ],
    refine le_trans (norm_mul_le _ _) (mul_le_mul_of_nonneg_left _ (norm_nonneg _)),
    exact list.norm_prod_le' (list.cons_ne_nil b l)
  end

lemma list.nnnorm_prod_le' {l : list Œ±} (hl : l ‚â† []) : ‚Äñl.prod‚Äñ‚Çä ‚â§ (l.map nnnorm).prod :=
(list.norm_prod_le' hl).trans_eq $ by simp [nnreal.coe_list_prod, list.map_map]

lemma list.norm_prod_le [norm_one_class Œ±] : ‚àÄ l : list Œ±, ‚Äñl.prod‚Äñ ‚â§ (l.map norm).prod
| [] := by simp
| (a::l) := list.norm_prod_le' (list.cons_ne_nil a l)

lemma list.nnnorm_prod_le [norm_one_class Œ±] (l : list Œ±) : ‚Äñl.prod‚Äñ‚Çä ‚â§ (l.map nnnorm).prod :=
l.norm_prod_le.trans_eq $ by simp [nnreal.coe_list_prod, list.map_map]

lemma finset.norm_prod_le' {Œ± : Type*} [normed_comm_ring Œ±] (s : finset Œπ) (hs : s.nonempty)
  (f : Œπ ‚Üí Œ±) :
  ‚Äñ‚àè i in s, f i‚Äñ ‚â§ ‚àè i in s, ‚Äñf i‚Äñ :=
begin
  rcases s with ‚ü®‚ü®l‚ü©, hl‚ü©,
  have : l.map f ‚â† [], by simpa using hs,
  simpa using list.norm_prod_le' this
end

lemma finset.nnnorm_prod_le' {Œ± : Type*} [normed_comm_ring Œ±] (s : finset Œπ) (hs : s.nonempty)
  (f : Œπ ‚Üí Œ±) :
  ‚Äñ‚àè i in s, f i‚Äñ‚Çä ‚â§ ‚àè i in s, ‚Äñf i‚Äñ‚Çä :=
(s.norm_prod_le' hs f).trans_eq $ by simp [nnreal.coe_prod]

lemma finset.norm_prod_le {Œ± : Type*} [normed_comm_ring Œ±] [norm_one_class Œ±] (s : finset Œπ)
  (f : Œπ ‚Üí Œ±) :
  ‚Äñ‚àè i in s, f i‚Äñ ‚â§ ‚àè i in s, ‚Äñf i‚Äñ :=
begin
  rcases s with ‚ü®‚ü®l‚ü©, hl‚ü©,
  simpa using (l.map f).norm_prod_le
end

lemma finset.nnnorm_prod_le {Œ± : Type*} [normed_comm_ring Œ±] [norm_one_class Œ±] (s : finset Œπ)
  (f : Œπ ‚Üí Œ±) :
  ‚Äñ‚àè i in s, f i‚Äñ‚Çä ‚â§ ‚àè i in s, ‚Äñf i‚Äñ‚Çä :=
(s.norm_prod_le f).trans_eq $ by simp [nnreal.coe_prod]

/-- If `Œ±` is a seminormed ring, then `‚Äña ^ n‚Äñ‚Çä ‚â§ ‚Äña‚Äñ‚Çä ^ n` for `n > 0`.
See also `nnnorm_pow_le`. -/
lemma nnnorm_pow_le' (a : Œ±) : ‚àÄ {n : ‚Ñï}, 0 < n ‚Üí ‚Äña ^ n‚Äñ‚Çä ‚â§ ‚Äña‚Äñ‚Çä ^ n
| 1 h := by simp only [pow_one]
| (n + 2) h := by simpa only [pow_succ _ (n + 1)] using
    le_trans (nnnorm_mul_le _ _) (mul_le_mul_left' (nnnorm_pow_le' n.succ_pos) _)

/-- If `Œ±` is a seminormed ring with `‚Äñ1‚Äñ‚Çä = 1`, then `‚Äña ^ n‚Äñ‚Çä ‚â§ ‚Äña‚Äñ‚Çä ^ n`.
See also `nnnorm_pow_le'`.-/
lemma nnnorm_pow_le [norm_one_class Œ±] (a : Œ±) (n : ‚Ñï) : ‚Äña ^ n‚Äñ‚Çä ‚â§ ‚Äña‚Äñ‚Çä ^ n :=
nat.rec_on n (by simp only [pow_zero, nnnorm_one]) (Œª k hk, nnnorm_pow_le' a k.succ_pos)

/-- If `Œ±` is a seminormed ring, then `‚Äña ^ n‚Äñ ‚â§ ‚Äña‚Äñ ^ n` for `n > 0`. See also `norm_pow_le`. -/
lemma norm_pow_le' (a : Œ±) {n : ‚Ñï} (h : 0 < n) : ‚Äña ^ n‚Äñ ‚â§ ‚Äña‚Äñ ^ n :=
by simpa only [nnreal.coe_pow, coe_nnnorm] using nnreal.coe_mono (nnnorm_pow_le' a h)

/-- If `Œ±` is a seminormed ring with `‚Äñ1‚Äñ = 1`, then `‚Äña ^ n‚Äñ ‚â§ ‚Äña‚Äñ ^ n`. See also `norm_pow_le'`.-/
lemma norm_pow_le [norm_one_class Œ±] (a : Œ±) (n : ‚Ñï) : ‚Äña ^ n‚Äñ ‚â§ ‚Äña‚Äñ ^ n :=
nat.rec_on n (by simp only [pow_zero, norm_one]) (Œª n hn, norm_pow_le' a n.succ_pos)

lemma eventually_norm_pow_le (a : Œ±) : ‚àÄ·∂† (n:‚Ñï) in at_top, ‚Äña ^ n‚Äñ ‚â§ ‚Äña‚Äñ ^ n :=
eventually_at_top.mpr ‚ü®1, Œª b h, norm_pow_le' a (nat.succ_le_iff.mp h)‚ü©

instance : semi_normed_ring (ulift Œ±) :=
{ .. ulift.non_unital_semi_normed_ring,
  .. ulift.seminormed_add_comm_group }

/-- Seminormed ring structure on the product of two seminormed rings,
  using the sup norm. -/
instance prod.semi_normed_ring [semi_normed_ring Œ≤] :
  semi_normed_ring (Œ± √ó Œ≤) :=
{ ..prod.non_unital_semi_normed_ring,
  ..prod.seminormed_add_comm_group, }

/-- Seminormed ring structure on the product of finitely many seminormed rings,
  using the sup norm. -/
instance pi.semi_normed_ring {œÄ : Œπ ‚Üí Type*} [fintype Œπ]
  [Œ† i, semi_normed_ring (œÄ i)] :
  semi_normed_ring (Œ† i, œÄ i) :=
{ ..pi.non_unital_semi_normed_ring,
  ..pi.seminormed_add_comm_group, }

instance mul_opposite.semi_normed_ring : semi_normed_ring Œ±·µê·µí·µñ :=
{ ..mul_opposite.non_unital_semi_normed_ring,
  ..mul_opposite.seminormed_add_comm_group }

end semi_normed_ring

section non_unital_normed_ring
variables [non_unital_normed_ring Œ±]

instance : non_unital_normed_ring (ulift Œ±) :=
{ .. ulift.non_unital_semi_normed_ring,
  .. ulift.seminormed_add_comm_group }

/-- Non-unital normed ring structure on the product of two non-unital normed rings,
using the sup norm. -/
instance prod.non_unital_normed_ring [non_unital_normed_ring Œ≤] :
  non_unital_normed_ring (Œ± √ó Œ≤) :=
{ norm_mul := norm_mul_le,
  ..prod.seminormed_add_comm_group }

/-- Normed ring structure on the product of finitely many non-unital normed rings, using the sup
norm. -/
instance pi.non_unital_normed_ring {œÄ : Œπ ‚Üí Type*} [fintype Œπ] [Œ† i, non_unital_normed_ring (œÄ i)] :
  non_unital_normed_ring (Œ† i, œÄ i) :=
{ norm_mul := norm_mul_le,
  ..pi.normed_add_comm_group }

instance mul_opposite.non_unital_normed_ring : non_unital_normed_ring Œ±·µê·µí·µñ :=
{ norm_mul := norm_mul_le,
  ..mul_opposite.normed_add_comm_group }

end non_unital_normed_ring

section normed_ring

variables [normed_ring Œ±]

lemma units.norm_pos [nontrivial Œ±] (x : Œ±À£) : 0 < ‚Äñ(x:Œ±)‚Äñ :=
norm_pos_iff.mpr (units.ne_zero x)

lemma units.nnnorm_pos [nontrivial Œ±] (x : Œ±À£) : 0 < ‚Äñ(x:Œ±)‚Äñ‚Çä :=
x.norm_pos

instance : normed_ring (ulift Œ±) :=
{ .. ulift.semi_normed_ring,
  .. ulift.normed_add_comm_group }

/-- Normed ring structure on the product of two normed rings, using the sup norm. -/
instance prod.normed_ring [normed_ring Œ≤] : normed_ring (Œ± √ó Œ≤) :=
{ norm_mul := norm_mul_le,
  ..prod.normed_add_comm_group }

/-- Normed ring structure on the product of finitely many normed rings, using the sup norm. -/
instance pi.normed_ring {œÄ : Œπ ‚Üí Type*} [fintype Œπ] [Œ† i, normed_ring (œÄ i)] :
  normed_ring (Œ† i, œÄ i) :=
{ norm_mul := norm_mul_le,
  ..pi.normed_add_comm_group }

instance mul_opposite.normed_ring : normed_ring Œ±·µê·µí·µñ :=
{ norm_mul := norm_mul_le,
  ..mul_opposite.normed_add_comm_group }

end normed_ring

@[priority 100] -- see Note [lower instance priority]
instance semi_normed_ring_top_monoid [non_unital_semi_normed_ring Œ±] : has_continuous_mul Œ± :=
‚ü® continuous_iff_continuous_at.2 $ Œª x, tendsto_iff_norm_tendsto_zero.2 $
    begin
      have : ‚àÄ e : Œ± √ó Œ±, ‚Äñe.1 * e.2 - x.1 * x.2‚Äñ ‚â§ ‚Äñe.1‚Äñ * ‚Äñe.2 - x.2‚Äñ + ‚Äñe.1 - x.1‚Äñ * ‚Äñx.2‚Äñ,
      { intro e,
        calc ‚Äñe.1 * e.2 - x.1 * x.2‚Äñ ‚â§ ‚Äñe.1 * (e.2 - x.2) + (e.1 - x.1) * x.2‚Äñ :
          by rw [mul_sub, sub_mul, sub_add_sub_cancel]
        ... ‚â§ ‚Äñe.1‚Äñ * ‚Äñe.2 - x.2‚Äñ + ‚Äñe.1 - x.1‚Äñ * ‚Äñx.2‚Äñ :
          norm_add_le_of_le (norm_mul_le _ _) (norm_mul_le _ _) },
      refine squeeze_zero (Œª e, norm_nonneg _) this _,
      convert ((continuous_fst.tendsto x).norm.mul ((continuous_snd.tendsto x).sub
        tendsto_const_nhds).norm).add
        (((continuous_fst.tendsto x).sub tendsto_const_nhds).norm.mul _),
      show tendsto _ _ _, from tendsto_const_nhds,
      simp
    end ‚ü©

/-- A seminormed ring is a topological ring. -/
@[priority 100] -- see Note [lower instance priority]
instance semi_normed_top_ring [non_unital_semi_normed_ring Œ±] : topological_ring Œ± := { }

section normed_division_ring

variables [normed_division_ring Œ±]

@[simp] lemma norm_mul (a b : Œ±) : ‚Äña * b‚Äñ = ‚Äña‚Äñ * ‚Äñb‚Äñ :=
normed_division_ring.norm_mul' a b

@[priority 900]
instance normed_division_ring.to_norm_one_class : norm_one_class Œ± :=
‚ü®mul_left_cancel‚ÇÄ (mt norm_eq_zero.1 (one_ne_zero' Œ±)) $
  by rw [‚Üê norm_mul, mul_one, mul_one]‚ü©

instance is_absolute_value_norm : is_absolute_value (norm : Œ± ‚Üí ‚Ñù) :=
{ abv_nonneg := norm_nonneg,
  abv_eq_zero := Œª _, norm_eq_zero,
  abv_add := norm_add_le,
  abv_mul := norm_mul }

@[simp] lemma nnnorm_mul (a b : Œ±) : ‚Äña * b‚Äñ‚Çä = ‚Äña‚Äñ‚Çä * ‚Äñb‚Äñ‚Çä :=
nnreal.eq $ norm_mul a b

/-- `norm` as a `monoid_with_zero_hom`. -/
@[simps] def norm_hom : Œ± ‚Üí*‚ÇÄ ‚Ñù := ‚ü®norm, norm_zero, norm_one, norm_mul‚ü©

/-- `nnnorm` as a `monoid_with_zero_hom`. -/
@[simps] def nnnorm_hom : Œ± ‚Üí*‚ÇÄ ‚Ñù‚â•0 := ‚ü®nnnorm, nnnorm_zero, nnnorm_one, nnnorm_mul‚ü©

@[simp] lemma norm_pow (a : Œ±) : ‚àÄ (n : ‚Ñï), ‚Äña ^ n‚Äñ = ‚Äña‚Äñ ^ n :=
(norm_hom.to_monoid_hom : Œ± ‚Üí* ‚Ñù).map_pow a

@[simp] lemma nnnorm_pow (a : Œ±) (n : ‚Ñï) : ‚Äña ^ n‚Äñ‚Çä = ‚Äña‚Äñ‚Çä ^ n :=
(nnnorm_hom.to_monoid_hom : Œ± ‚Üí* ‚Ñù‚â•0).map_pow a n

protected lemma list.norm_prod (l : list Œ±) : ‚Äñl.prod‚Äñ = (l.map norm).prod :=
(norm_hom.to_monoid_hom : Œ± ‚Üí* ‚Ñù).map_list_prod _

protected lemma list.nnnorm_prod (l : list Œ±) : ‚Äñl.prod‚Äñ‚Çä = (l.map nnnorm).prod :=
(nnnorm_hom.to_monoid_hom : Œ± ‚Üí* ‚Ñù‚â•0).map_list_prod _

@[simp] lemma norm_div (a b : Œ±) : ‚Äña / b‚Äñ = ‚Äña‚Äñ / ‚Äñb‚Äñ := map_div‚ÇÄ (norm_hom : Œ± ‚Üí*‚ÇÄ ‚Ñù) a b

@[simp] lemma nnnorm_div (a b : Œ±) : ‚Äña / b‚Äñ‚Çä = ‚Äña‚Äñ‚Çä / ‚Äñb‚Äñ‚Çä := map_div‚ÇÄ (nnnorm_hom : Œ± ‚Üí*‚ÇÄ ‚Ñù‚â•0) a b

@[simp] lemma norm_inv (a : Œ±) : ‚Äña‚Åª¬π‚Äñ = ‚Äña‚Äñ‚Åª¬π := map_inv‚ÇÄ (norm_hom : Œ± ‚Üí*‚ÇÄ ‚Ñù) a

@[simp] lemma nnnorm_inv (a : Œ±) : ‚Äña‚Åª¬π‚Äñ‚Çä = ‚Äña‚Äñ‚Çä‚Åª¬π :=
nnreal.eq $ by simp

@[simp] lemma norm_zpow : ‚àÄ (a : Œ±) (n : ‚Ñ§), ‚Äña^n‚Äñ = ‚Äña‚Äñ^n := map_zpow‚ÇÄ (norm_hom : Œ± ‚Üí*‚ÇÄ ‚Ñù)

@[simp] lemma nnnorm_zpow : ‚àÄ (a : Œ±) (n : ‚Ñ§), ‚Äña ^ n‚Äñ‚Çä = ‚Äña‚Äñ‚Çä ^ n :=
map_zpow‚ÇÄ (nnnorm_hom : Œ± ‚Üí*‚ÇÄ ‚Ñù‚â•0)

lemma dist_inv_inv‚ÇÄ {z w : Œ±} (hz : z ‚â† 0) (hw : w ‚â† 0) :
  dist z‚Åª¬π w‚Åª¬π = (dist z w) / (‚Äñz‚Äñ * ‚Äñw‚Äñ) :=
by rw [dist_eq_norm, inv_sub_inv' hz hw, norm_mul, norm_mul, norm_inv, norm_inv, mul_comm ‚Äñz‚Äñ‚Åª¬π,
  mul_assoc, dist_eq_norm', div_eq_mul_inv, mul_inv]

lemma nndist_inv_inv‚ÇÄ {z w : Œ±} (hz : z ‚â† 0) (hw : w ‚â† 0) :
  nndist z‚Åª¬π w‚Åª¬π = (nndist z w) / (‚Äñz‚Äñ‚Çä * ‚Äñw‚Äñ‚Çä) :=
by { rw ‚Üê nnreal.coe_eq, simp [-nnreal.coe_eq, dist_inv_inv‚ÇÄ hz hw], }

/-- Multiplication on the left by a nonzero element of a normed division ring tends to infinity at
infinity. TODO: use `bornology.cobounded` instead of `filter.comap has_norm.norm filter.at_top`. -/
lemma filter.tendsto_mul_left_cobounded {a : Œ±} (ha : a ‚â† 0) :
  tendsto ((*) a) (comap norm at_top) (comap norm at_top) :=
by simpa only [tendsto_comap_iff, (‚àò), norm_mul]
  using tendsto_const_nhds.mul_at_top (norm_pos_iff.2 ha) tendsto_comap

/-- Multiplication on the right by a nonzero element of a normed division ring tends to infinity at
infinity. TODO: use `bornology.cobounded` instead of `filter.comap has_norm.norm filter.at_top`. -/
lemma filter.tendsto_mul_right_cobounded {a : Œ±} (ha : a ‚â† 0) :
  tendsto (Œª x, x * a) (comap norm at_top) (comap norm at_top) :=
by simpa only [tendsto_comap_iff, (‚àò), norm_mul]
  using tendsto_comap.at_top_mul (norm_pos_iff.2 ha) tendsto_const_nhds

@[priority 100] -- see Note [lower instance priority]
instance normed_division_ring.to_has_continuous_inv‚ÇÄ : has_continuous_inv‚ÇÄ Œ± :=
begin
  refine ‚ü®Œª r r0, tendsto_iff_norm_tendsto_zero.2 _‚ü©,
  have r0' : 0 < ‚Äñr‚Äñ := norm_pos_iff.2 r0,
  rcases exists_between r0' with ‚ü®Œµ, Œµ0, Œµr‚ü©,
  have : ‚àÄ·∂† e in ùìù r, ‚Äñe‚Åª¬π - r‚Åª¬π‚Äñ ‚â§ ‚Äñr - e‚Äñ / ‚Äñr‚Äñ / Œµ,
  { filter_upwards [(is_open_lt continuous_const continuous_norm).eventually_mem Œµr] with e he,
    have e0 : e ‚â† 0 := norm_pos_iff.1 (Œµ0.trans he),
    calc ‚Äñe‚Åª¬π - r‚Åª¬π‚Äñ = ‚Äñr‚Äñ‚Åª¬π * ‚Äñr - e‚Äñ * ‚Äñe‚Äñ‚Åª¬π : by
      { rw [‚Üênorm_inv, ‚Üênorm_inv, ‚Üênorm_mul, ‚Üênorm_mul, mul_sub, sub_mul, mul_assoc _ e,
          inv_mul_cancel r0, mul_inv_cancel e0, one_mul, mul_one] }
    ...              = ‚Äñr - e‚Äñ / ‚Äñr‚Äñ / ‚Äñe‚Äñ : by field_simp [mul_comm]
    ... ‚â§ ‚Äñr - e‚Äñ / ‚Äñr‚Äñ / Œµ :
      div_le_div_of_le_left (div_nonneg (norm_nonneg _) (norm_nonneg _)) Œµ0 he.le },
  refine squeeze_zero' (eventually_of_forall $ Œª _, norm_nonneg _) this _,
  refine (((continuous_const.sub continuous_id).norm.div_const _).div_const _).tendsto' _ _ _,
  simp,
end

/-- A normed division ring is a topological division ring. -/
@[priority 100] -- see Note [lower instance priority]
instance normed_division_ring.to_topological_division_ring : topological_division_ring Œ± :=
{ }

lemma norm_map_one_of_pow_eq_one [monoid Œ≤] (œÜ : Œ≤ ‚Üí* Œ±) {x : Œ≤} {k : ‚Ñï+}
  (h : x ^ (k : ‚Ñï) = 1) :
  ‚ÄñœÜ x‚Äñ = 1 :=
begin
  rw [‚Üê pow_left_inj, ‚Üê norm_pow, ‚Üê map_pow, h, map_one, norm_one, one_pow],
  exacts [norm_nonneg _, zero_le_one, k.pos],
end

lemma norm_one_of_pow_eq_one {x : Œ±} {k : ‚Ñï+} (h : x ^ (k : ‚Ñï) = 1) :
  ‚Äñx‚Äñ = 1 :=
norm_map_one_of_pow_eq_one (monoid_hom.id Œ±) h

end normed_division_ring

/-- A normed field is a field with a norm satisfying ‚Äñx y‚Äñ = ‚Äñx‚Äñ ‚Äñy‚Äñ. -/
class normed_field (Œ± : Type*) extends has_norm Œ±, field Œ±, metric_space Œ± :=
(dist_eq : ‚àÄ x y, dist x y = norm (x - y))
(norm_mul' : ‚àÄ a b, norm (a * b) = norm a * norm b)

/-- A nontrivially normed field is a normed field in which there is an element of norm different
from `0` and `1`. This makes it possible to bring any element arbitrarily close to `0` by
multiplication by the powers of any element, and thus to relate algebra and topology. -/
class nontrivially_normed_field (Œ± : Type*) extends normed_field Œ± :=
(non_trivial : ‚àÉ x : Œ±, 1 < ‚Äñx‚Äñ)

/-- A densely normed field is a normed field for which the image of the norm is dense in `‚Ñù‚â•0`,
which means it is also nontrivially normed. However, not all nontrivally normed fields are densely
normed; in particular, the `padic`s exhibit this fact. -/
class densely_normed_field (Œ± : Type*) extends normed_field Œ± :=
(lt_norm_lt : ‚àÄ x y : ‚Ñù, 0 ‚â§ x ‚Üí x < y ‚Üí ‚àÉ a : Œ±, x < ‚Äña‚Äñ ‚àß ‚Äña‚Äñ < y)

section normed_field

/-- A densely normed field is always a nontrivially normed field.
See note [lower instance priority]. -/
@[priority 100]
instance densely_normed_field.to_nontrivially_normed_field [densely_normed_field Œ±] :
  nontrivially_normed_field Œ± :=
{ non_trivial := let ‚ü®a, h, _‚ü© := densely_normed_field.lt_norm_lt 1 2 zero_le_one one_lt_two in
    ‚ü®a, h‚ü© }

variables [normed_field Œ±]

@[priority 100] -- see Note [lower instance priority]
instance normed_field.to_normed_division_ring : normed_division_ring Œ± :=
{ ..‚Äπnormed_field Œ±‚Ä∫ }

@[priority 100] -- see Note [lower instance priority]
instance normed_field.to_normed_comm_ring : normed_comm_ring Œ± :=
{ norm_mul := Œª a b, (norm_mul a b).le, ..‚Äπnormed_field Œ±‚Ä∫ }

@[simp] lemma norm_prod (s : finset Œ≤) (f : Œ≤ ‚Üí Œ±) :
  ‚Äñ‚àè b in s, f b‚Äñ = ‚àè b in s, ‚Äñf b‚Äñ :=
(norm_hom.to_monoid_hom : Œ± ‚Üí* ‚Ñù).map_prod f s

@[simp] lemma nnnorm_prod (s : finset Œ≤) (f : Œ≤ ‚Üí Œ±) :
  ‚Äñ‚àè b in s, f b‚Äñ‚Çä = ‚àè b in s, ‚Äñf b‚Äñ‚Çä :=
(nnnorm_hom.to_monoid_hom : Œ± ‚Üí* ‚Ñù‚â•0).map_prod f s

end normed_field

namespace normed_field

section nontrivially

variables (Œ±) [nontrivially_normed_field Œ±]

lemma exists_one_lt_norm : ‚àÉx : Œ±, 1 < ‚Äñx‚Äñ := ‚Äπnontrivially_normed_field Œ±‚Ä∫.non_trivial

lemma exists_lt_norm (r : ‚Ñù) : ‚àÉ x : Œ±, r < ‚Äñx‚Äñ :=
let ‚ü®w, hw‚ü© := exists_one_lt_norm Œ± in
let ‚ü®n, hn‚ü© := pow_unbounded_of_one_lt r hw in
‚ü®w^n, by rwa norm_pow‚ü©

lemma exists_norm_lt {r : ‚Ñù} (hr : 0 < r) : ‚àÉ x : Œ±, 0 < ‚Äñx‚Äñ ‚àß ‚Äñx‚Äñ < r :=
let ‚ü®w, hw‚ü© := exists_lt_norm Œ± r‚Åª¬π in
‚ü®w‚Åª¬π, by rwa [‚Üê set.mem_Ioo, norm_inv, ‚Üê set.mem_inv, set.inv_Ioo_0_left hr]‚ü©

lemma exists_norm_lt_one : ‚àÉx : Œ±, 0 < ‚Äñx‚Äñ ‚àß ‚Äñx‚Äñ < 1 :=
exists_norm_lt Œ± one_pos

variable {Œ±}

@[instance]
lemma punctured_nhds_ne_bot (x : Œ±) : ne_bot (ùìù[‚â†] x) :=
begin
  rw [‚Üê mem_closure_iff_nhds_within_ne_bot, metric.mem_closure_iff],
  rintros Œµ Œµ0,
  rcases exists_norm_lt Œ± Œµ0 with ‚ü®b, hb0, hbŒµ‚ü©,
  refine ‚ü®x + b, mt (set.mem_singleton_iff.trans add_right_eq_self).1 $ norm_pos_iff.1 hb0, _‚ü©,
  rwa [dist_comm, dist_eq_norm, add_sub_cancel'],
end

@[instance]
lemma nhds_within_is_unit_ne_bot : ne_bot (ùìù[{x : Œ± | is_unit x}] 0) :=
by simpa only [is_unit_iff_ne_zero] using punctured_nhds_ne_bot (0:Œ±)

end nontrivially

section densely

variables (Œ±) [densely_normed_field Œ±]

lemma exists_lt_norm_lt {r‚ÇÅ r‚ÇÇ : ‚Ñù} (h‚ÇÄ : 0 ‚â§ r‚ÇÅ) (h : r‚ÇÅ < r‚ÇÇ) : ‚àÉ x : Œ±, r‚ÇÅ < ‚Äñx‚Äñ ‚àß ‚Äñx‚Äñ < r‚ÇÇ :=
densely_normed_field.lt_norm_lt r‚ÇÅ r‚ÇÇ h‚ÇÄ h

lemma exists_lt_nnnorm_lt {r‚ÇÅ r‚ÇÇ : ‚Ñù‚â•0} (h : r‚ÇÅ < r‚ÇÇ) : ‚àÉ x : Œ±, r‚ÇÅ < ‚Äñx‚Äñ‚Çä ‚àß ‚Äñx‚Äñ‚Çä < r‚ÇÇ :=
by exact_mod_cast exists_lt_norm_lt Œ± r‚ÇÅ.prop h

instance densely_ordered_range_norm : densely_ordered (set.range (norm : Œ± ‚Üí ‚Ñù)) :=
{ dense :=
  begin
    rintro ‚ü®-, x, rfl‚ü© ‚ü®-, y, rfl‚ü© hxy,
    exact let ‚ü®z, h‚ü© := exists_lt_norm_lt Œ± (norm_nonneg _) hxy in ‚ü®‚ü®‚Äñz‚Äñ, z, rfl‚ü©, h‚ü©,
  end }

instance densely_ordered_range_nnnorm : densely_ordered (set.range (nnnorm : Œ± ‚Üí ‚Ñù‚â•0)) :=
{ dense :=
  begin
    rintro ‚ü®-, x, rfl‚ü© ‚ü®-, y, rfl‚ü© hxy,
    exact let ‚ü®z, h‚ü© := exists_lt_nnnorm_lt Œ± hxy in ‚ü®‚ü®‚Äñz‚Äñ‚Çä, z, rfl‚ü©, h‚ü©,
  end }

lemma dense_range_nnnorm : dense_range (nnnorm : Œ± ‚Üí ‚Ñù‚â•0) :=
dense_of_exists_between $ Œª _ _ hr, let ‚ü®x, h‚ü© := exists_lt_nnnorm_lt Œ± hr in ‚ü®‚Äñx‚Äñ‚Çä, ‚ü®x, rfl‚ü©, h‚ü©

end densely

end normed_field

instance : normed_comm_ring ‚Ñù :=
{ norm_mul := Œª x y, (abs_mul x y).le,
  .. real.normed_add_comm_group,
  .. real.comm_ring }

noncomputable instance : normed_field ‚Ñù :=
{ norm_mul' := abs_mul,
  .. real.normed_add_comm_group }

noncomputable instance : densely_normed_field ‚Ñù :=
{ lt_norm_lt := Œª _ _ h‚ÇÄ hr, let ‚ü®x, h‚ü© := exists_between hr in
    ‚ü®x, by rwa [real.norm_eq_abs, abs_of_nonneg (h‚ÇÄ.trans h.1.le)]‚ü© }

namespace real

lemma to_nnreal_mul_nnnorm {x : ‚Ñù} (y : ‚Ñù) (hx : 0 ‚â§ x) : x.to_nnreal * ‚Äñy‚Äñ‚Çä = ‚Äñx * y‚Äñ‚Çä :=
by simp [real.to_nnreal_of_nonneg, nnnorm, norm_of_nonneg, hx]

lemma nnnorm_mul_to_nnreal (x : ‚Ñù) {y : ‚Ñù} (hy : 0 ‚â§ y) : ‚Äñx‚Äñ‚Çä * y.to_nnreal = ‚Äñx * y‚Äñ‚Çä :=
by simp [real.to_nnreal_of_nonneg, nnnorm, norm_of_nonneg, hy]

end real

namespace nnreal

open_locale nnreal

@[simp] lemma norm_eq (x : ‚Ñù‚â•0) : ‚Äñ(x : ‚Ñù)‚Äñ = x :=
by rw [real.norm_eq_abs, x.abs_eq]

@[simp] lemma nnnorm_eq (x : ‚Ñù‚â•0) : ‚Äñ(x : ‚Ñù)‚Äñ‚Çä = x :=
nnreal.eq $ real.norm_of_nonneg x.2

end nnreal

@[simp] lemma norm_norm [seminormed_add_comm_group Œ±] (x : Œ±) : ‚Äñ‚Äñx‚Äñ‚Äñ = ‚Äñx‚Äñ :=
real.norm_of_nonneg (norm_nonneg _)

@[simp] lemma nnnorm_norm [seminormed_add_comm_group Œ±] (a : Œ±) : ‚Äñ‚Äña‚Äñ‚Äñ‚Çä = ‚Äña‚Äñ‚Çä :=
by simpa [real.nnnorm_of_nonneg (norm_nonneg a)]

/-- A restatement of `metric_space.tendsto_at_top` in terms of the norm. -/
lemma normed_add_comm_group.tendsto_at_top [nonempty Œ±] [semilattice_sup Œ±] {Œ≤ : Type*}
  [seminormed_add_comm_group Œ≤] {f : Œ± ‚Üí Œ≤} {b : Œ≤} :
  tendsto f at_top (ùìù b) ‚Üî ‚àÄ Œµ, 0 < Œµ ‚Üí ‚àÉ N, ‚àÄ n, N ‚â§ n ‚Üí ‚Äñf n - b‚Äñ < Œµ :=
(at_top_basis.tendsto_iff metric.nhds_basis_ball).trans (by simp [dist_eq_norm])

/--
A variant of `normed_add_comm_group.tendsto_at_top` that
uses `‚àÉ N, ‚àÄ n > N, ...` rather than `‚àÉ N, ‚àÄ n ‚â• N, ...`
-/
lemma normed_add_comm_group.tendsto_at_top' [nonempty Œ±] [semilattice_sup Œ±] [no_max_order Œ±]
  {Œ≤ : Type*} [seminormed_add_comm_group Œ≤]
  {f : Œ± ‚Üí Œ≤} {b : Œ≤} :
  tendsto f at_top (ùìù b) ‚Üî ‚àÄ Œµ, 0 < Œµ ‚Üí ‚àÉ N, ‚àÄ n, N < n ‚Üí ‚Äñf n - b‚Äñ < Œµ :=
(at_top_basis_Ioi.tendsto_iff metric.nhds_basis_ball).trans (by simp [dist_eq_norm])

instance : normed_comm_ring ‚Ñ§ :=
{ norm_mul := Œª m n, le_of_eq $ by simp only [norm, int.cast_mul, abs_mul],
  mul_comm := mul_comm,
  .. int.normed_add_comm_group }

instance : norm_one_class ‚Ñ§ :=
‚ü®by simp [‚Üê int.norm_cast_real]‚ü©

instance : normed_field ‚Ñö :=
{ norm_mul' := Œª r‚ÇÅ r‚ÇÇ, by simp only [norm, rat.cast_mul, abs_mul],
  .. rat.normed_add_comm_group }

instance : densely_normed_field ‚Ñö :=
{ lt_norm_lt := Œª r‚ÇÅ r‚ÇÇ h‚ÇÄ hr, let ‚ü®q, h‚ü© := exists_rat_btwn hr in
    ‚ü®q, by { unfold norm, rwa abs_of_pos (h‚ÇÄ.trans_lt h.1) } ‚ü© }

section ring_hom_isometric

variables {R‚ÇÅ : Type*} {R‚ÇÇ : Type*} {R‚ÇÉ : Type*}

/-- This class states that a ring homomorphism is isometric. This is a sufficient assumption
for a continuous semilinear map to be bounded and this is the main use for this typeclass. -/
class ring_hom_isometric [semiring R‚ÇÅ] [semiring R‚ÇÇ] [has_norm R‚ÇÅ] [has_norm R‚ÇÇ]
  (œÉ : R‚ÇÅ ‚Üí+* R‚ÇÇ) : Prop :=
(is_iso : ‚àÄ {x : R‚ÇÅ}, ‚ÄñœÉ x‚Äñ = ‚Äñx‚Äñ)

attribute [simp] ring_hom_isometric.is_iso

variables [semi_normed_ring R‚ÇÅ] [semi_normed_ring R‚ÇÇ] [semi_normed_ring R‚ÇÉ]

instance ring_hom_isometric.ids : ring_hom_isometric (ring_hom.id R‚ÇÅ) :=
‚ü®Œª x, rfl‚ü©

end ring_hom_isometric

/-! ### Induced normed structures -/

section induced

variables {F : Type*} (R S : Type*)

/-- A non-unital ring homomorphism from an `non_unital_ring` to a `non_unital_semi_normed_ring`
induces a `non_unital_semi_normed_ring` structure on the domain.

See note [reducible non-instances] -/
@[reducible]
def non_unital_semi_normed_ring.induced [non_unital_ring R] [non_unital_semi_normed_ring S]
  [non_unital_ring_hom_class F R S] (f : F) : non_unital_semi_normed_ring R :=
{ norm_mul := Œª x y, by { unfold norm, exact (map_mul f x y).symm ‚ñ∏ norm_mul_le (f x) (f y) },
  .. seminormed_add_comm_group.induced R S f }

/-- An injective non-unital ring homomorphism from an `non_unital_ring` to a
`non_unital_normed_ring` induces a `non_unital_normed_ring` structure on the domain.

See note [reducible non-instances] -/
@[reducible]
def non_unital_normed_ring.induced [non_unital_ring R] [non_unital_normed_ring S]
  [non_unital_ring_hom_class F R S] (f : F) (hf : function.injective f) :
  non_unital_normed_ring R :=
{ .. non_unital_semi_normed_ring.induced R S f,
  .. normed_add_comm_group.induced R S f hf }

/-- A non-unital ring homomorphism from an `ring` to a `semi_normed_ring` induces a
`semi_normed_ring` structure on the domain.

See note [reducible non-instances] -/
@[reducible]
def semi_normed_ring.induced [ring R] [semi_normed_ring S] [non_unital_ring_hom_class F R S]
  (f : F) : semi_normed_ring R :=
{ .. non_unital_semi_normed_ring.induced R S f,
  .. seminormed_add_comm_group.induced R S f }

/-- An injective non-unital ring homomorphism from an `ring` to a `normed_ring` induces a
`normed_ring` structure on the domain.

See note [reducible non-instances] -/
@[reducible]
def normed_ring.induced [ring R] [normed_ring S] [non_unital_ring_hom_class F R S] (f : F)
  (hf : function.injective f) : normed_ring R :=
{ .. non_unital_semi_normed_ring.induced R S f,
  .. normed_add_comm_group.induced R S f hf }

/-- A non-unital ring homomorphism from a `comm_ring` to a `semi_normed_ring` induces a
`semi_normed_comm_ring` structure on the domain.

See note [reducible non-instances] -/
@[reducible]
def semi_normed_comm_ring.induced [comm_ring R] [semi_normed_ring S]
  [non_unital_ring_hom_class F R S] (f : F) : semi_normed_comm_ring R :=
{ mul_comm := mul_comm,
  .. non_unital_semi_normed_ring.induced R S f,
  .. seminormed_add_comm_group.induced R S f }

/-- An injective non-unital ring homomorphism from an `comm_ring` to a `normed_ring` induces a
`normed_comm_ring` structure on the domain.

See note [reducible non-instances] -/
@[reducible]
def normed_comm_ring.induced [comm_ring R] [normed_ring S] [non_unital_ring_hom_class F R S] (f : F)
  (hf : function.injective f) : normed_comm_ring R :=
{ .. semi_normed_comm_ring.induced R S f,
  .. normed_add_comm_group.induced R S f hf }

/-- An injective non-unital ring homomorphism from an `division_ring` to a `normed_ring` induces a
`normed_division_ring` structure on the domain.

See note [reducible non-instances] -/
@[reducible]
def normed_division_ring.induced [division_ring R] [normed_division_ring S]
  [non_unital_ring_hom_class F R S] (f : F) (hf : function.injective f) : normed_division_ring R :=
{ norm_mul' := Œª x y, by { unfold norm, exact (map_mul f x y).symm ‚ñ∏ norm_mul (f x) (f y) },
  .. normed_add_comm_group.induced R S f hf }

/-- An injective non-unital ring homomorphism from an `field` to a `normed_ring` induces a
`normed_field` structure on the domain.

See note [reducible non-instances] -/
@[reducible]
def normed_field.induced [field R] [normed_field S]
  [non_unital_ring_hom_class F R S] (f : F) (hf : function.injective f) : normed_field R :=
{ .. normed_division_ring.induced R S f hf }

/-- A ring homomorphism from a `ring R` to a `semi_normed_ring S` which induces the norm structure
`semi_normed_ring.induced` makes `R` satisfy `‚Äñ(1 : R)‚Äñ = 1` whenever `‚Äñ(1 : S)‚Äñ = 1`. -/
lemma norm_one_class.induced {F : Type*} (R S : Type*) [ring R] [semi_normed_ring S]
  [norm_one_class S] [ring_hom_class F R S] (f : F) :
  @norm_one_class R (semi_normed_ring.induced R S f).to_has_norm _ :=
{ norm_one := (congr_arg norm (map_one f)).trans norm_one }

end induced

namespace subring_class

variables {S R : Type*} [set_like S R]

instance to_semi_normed_ring [semi_normed_ring R] [subring_class S R] (s : S) :
  semi_normed_ring s :=
semi_normed_ring.induced s R (subring_class.subtype s)

instance to_normed_ring [normed_ring R] [subring_class S R] (s : S) :
  normed_ring s :=
normed_ring.induced s R (subring_class.subtype s) subtype.val_injective

instance to_semi_normed_comm_ring [semi_normed_comm_ring R] [h : subring_class S R] (s : S) :
  semi_normed_comm_ring s :=
{ mul_comm := mul_comm, .. subring_class.to_semi_normed_ring s }

instance to_normed_comm_ring [normed_comm_ring R] [subring_class S R] (s : S) :
  normed_comm_ring s :=
{ mul_comm := mul_comm, .. subring_class.to_normed_ring s }

end subring_class

-- Guard again import creep.
assert_not_exists restrict_scalars
