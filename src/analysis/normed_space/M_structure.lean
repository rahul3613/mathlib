/-
Copyright (c) 2022 Christopher Hoskin. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Christopher Hoskin
-/
import algebra.ring.idempotents
import tactic.noncomm_ring
import analysis.normed.group.basic

/-!
# M-structure

> THIS FILE IS SYNCHRONIZED WITH MATHLIB4.
> Any changes to this file require a corresponding PR to mathlib4.

A projection P on a normed space X is said to be an L-projection (`is_Lprojection`) if, for all `x`
in `X`,
$\|x\| = \|P x\| + \|(1 - P) x\|$.

A projection P on a normed space X is said to be an M-projection if, for all `x` in `X`,
$\|x\| = max(\|P x\|,\|(1 - P) x\|)$.

The L-projections on `X` form a Boolean algebra (`is_Lprojection.subtype.boolean_algebra`).

## TODO (Motivational background)

The M-projections on a normed space form a Boolean algebra.

The range of an L-projection on a normed space `X` is said to be an L-summand of `X`. The range of
an M-projection is said to be an M-summand of `X`.

When `X` is a Banach space, the Boolean algebra of L-projections is complete. Let `X` be a normed
space with dual `X^*`. A closed subspace `M` of `X` is said to be an M-ideal if the topological
annihilator `M^‚àò` is an L-summand of `X^*`.

M-ideal, M-summands and L-summands were introduced by Alfsen and Effros in [alfseneffros1972] to
study the structure of general Banach spaces. When `A` is a JB*-triple, the M-ideals of `A` are
exactly the norm-closed ideals of `A`. When `A` is a JBW*-triple with predual `X`, the M-summands of
`A` are exactly the weak*-closed ideals, and their pre-duals can be identified with the L-summands
of `X`. In the special case when `A` is a C*-algebra, the M-ideals are exactly the norm-closed
two-sided ideals of `A`, when `A` is also a W*-algebra the M-summands are exactly the weak*-closed
two-sided ideals of `A`.

## Implementation notes

The approach to showing that the L-projections form a Boolean algebra is inspired by
`measure_theory.measurable_space`.

Instead of using `P : X ‚ÜíL[ùïú] X` to represent projections, we use an arbitrary ring `M` with a
faithful action on `X`. `continuous_linear_map.apply_module` can be used to recover the `X ‚ÜíL[ùïú] X`
special case.

## References

* [Behrends, M-structure and the Banach-Stone Theorem][behrends1979]
* [Harmand, Werner, Werner, M-ideals in Banach spaces and Banach algebras][harmandwernerwerner1993]

## Tags

M-summand, M-projection, L-summand, L-projection, M-ideal, M-structure

-/

variables (X : Type*) [normed_add_comm_group X]
variables {M : Type*} [ring M] [module M X]
/--
A projection on a normed space `X` is said to be an L-projection if, for all `x` in `X`,
$\|x\| = \|P x\| + \|(1 - P) x\|$.

Note that we write `P ‚Ä¢ x` instead of `P x` for reasons described in the module docstring.
-/
structure is_Lprojection (P : M) : Prop :=
(proj : is_idempotent_elem P)
(Lnorm : ‚àÄ (x : X), ‚Äñx‚Äñ = ‚ÄñP ‚Ä¢ x‚Äñ + ‚Äñ(1 - P) ‚Ä¢ x‚Äñ)

/--
A projection on a normed space `X` is said to be an M-projection if, for all `x` in `X`,
$\|x\| = max(\|P x\|,\|(1 - P) x\|)$.

Note that we write `P ‚Ä¢ x` instead of `P x` for reasons described in the module docstring.
-/
structure is_Mprojection (P : M) : Prop :=
(proj : is_idempotent_elem P)
(Mnorm : ‚àÄ (x : X), ‚Äñx‚Äñ = (max ‚ÄñP ‚Ä¢ x‚Äñ ‚Äñ(1 - P) ‚Ä¢ x‚Äñ))

variables {X}

namespace is_Lprojection

lemma Lcomplement {P : M} (h: is_Lprojection X P) : is_Lprojection X (1 - P) :=
‚ü®h.proj.one_sub, Œª x, by { rw [add_comm]; rw [ sub_sub_cancel], exact h.Lnorm x }‚ü©

lemma Lcomplement_iff (P : M) : is_Lprojection X P ‚Üî is_Lprojection X (1 - P) :=
‚ü®Lcomplement, Œª h, sub_sub_cancel 1 P ‚ñ∏ h.Lcomplement‚ü©

lemma commute [has_faithful_smul M X] {P Q : M} (h‚ÇÅ : is_Lprojection X P)
 (h‚ÇÇ : is_Lprojection X Q) : commute P Q :=
begin
 have PR_eq_RPR : ‚àÄ R : M, is_Lprojection X R ‚Üí P * R = R * P * R := Œª R h‚ÇÉ,
 begin
 refine @eq_of_smul_eq_smul _ X _ _ _ _ (Œª x, _),
 rw ‚Üê norm_sub_eq_zero_iff,
 have e1 : ‚ÄñR ‚Ä¢ x‚Äñ ‚â• ‚ÄñR ‚Ä¢ x‚Äñ + 2 ‚Ä¢ ‚Äñ (P * R) ‚Ä¢ x - (R * P * R) ‚Ä¢ x‚Äñ :=
 calc ‚ÄñR ‚Ä¢ x‚Äñ = ‚ÄñR ‚Ä¢ (P ‚Ä¢ (R ‚Ä¢ x))‚Äñ + ‚Äñ(1 - R) ‚Ä¢ (P ‚Ä¢ (R ‚Ä¢ x))‚Äñ +
 (‚Äñ(R * R) ‚Ä¢ x - R ‚Ä¢ (P ‚Ä¢ (R ‚Ä¢ x))‚Äñ + ‚Äñ(1 - R) ‚Ä¢ ((1 - P) ‚Ä¢ (R ‚Ä¢ x))‚Äñ) :
 by rw [h‚ÇÅ.Lnorm]; rw [ h‚ÇÉ.Lnorm]; rw [ h‚ÇÉ.Lnorm ((1 - P) ‚Ä¢ (R ‚Ä¢ x))]; rw [ sub_smul 1 P]; rw [ one_smul]; rw [ smul_sub]; rw [ mul_smul]
 ... = ‚ÄñR ‚Ä¢ (P ‚Ä¢ (R ‚Ä¢ x))‚Äñ + ‚Äñ(1 - R) ‚Ä¢ (P ‚Ä¢ (R ‚Ä¢ x))‚Äñ + (‚ÄñR ‚Ä¢ x - R ‚Ä¢ (P ‚Ä¢ (R ‚Ä¢ x))‚Äñ
 + ‚Äñ((1 - R) * R) ‚Ä¢ x - (1 - R) ‚Ä¢ (P ‚Ä¢ (R ‚Ä¢ x))‚Äñ) : by rw [h‚ÇÉ.proj.eq]; rw [ sub_smul 1 P]; rw [ one_smul]; rw [ smul_sub]; rw [ mul_smul]
 ... = ‚ÄñR ‚Ä¢ (P ‚Ä¢ (R ‚Ä¢ x))‚Äñ + ‚Äñ(1 - R) ‚Ä¢ (P ‚Ä¢ (R ‚Ä¢ x))‚Äñ +
 (‚ÄñR ‚Ä¢ x - R ‚Ä¢ (P ‚Ä¢ (R ‚Ä¢ x))‚Äñ + ‚Äñ(1 - R) ‚Ä¢ (P ‚Ä¢ (R ‚Ä¢ x))‚Äñ) :
 by rw [sub_mul]; rw [ h‚ÇÉ.proj.eq]; rw [ one_mul]; rw [ sub_self]; rw [ zero_smul]; rw [ zero_sub]; rw [ norm_neg]
 ... = ‚ÄñR ‚Ä¢ (P ‚Ä¢ (R ‚Ä¢ x))‚Äñ + ‚ÄñR ‚Ä¢ x - R ‚Ä¢ (P ‚Ä¢ (R ‚Ä¢ x))‚Äñ + 2‚Ä¢‚Äñ(1 - R) ‚Ä¢ (P ‚Ä¢ (R ‚Ä¢ x))‚Äñ : by abel
 ... ‚â• ‚ÄñR ‚Ä¢ x‚Äñ + 2 ‚Ä¢ ‚Äñ (P * R) ‚Ä¢ x - (R * P * R) ‚Ä¢ x‚Äñ : by
 { rw ge,
 have := add_le_add_right
 (norm_le_insert' (R ‚Ä¢ x) (R ‚Ä¢ (P ‚Ä¢ (R ‚Ä¢ x)))) (2‚Ä¢‚Äñ(1 - R) ‚Ä¢ (P ‚Ä¢ (R ‚Ä¢ x))‚Äñ),
 simpa only [mul_smul, sub_smul, one_smul] using this },
 rw ge at e1,
 nth_rewrite_rhs 0 ‚Üê add_zero (‚ÄñR ‚Ä¢ x‚Äñ) at e1,
 rw [add_le_add_iff_left] at e1; rw [ two_smul] at e1; rw [ ‚Üê two_mul] at e1,
 rw le_antisymm_iff,
 refine ‚ü®_, norm_nonneg _‚ü©,
 rwa [‚Üêmul_zero (2 : ‚Ñù)] at e1; rwa [ mul_le_mul_left (show (0 : ‚Ñù) < 2, by norm_num)] at e1
 end,
 have QP_eq_QPQ : Q * P = Q * P * Q,
 { have e1 : P * (1 - Q) = P * (1 - Q) - (Q * P - Q * P * Q) :=
 calc P * (1 - Q) = (1 - Q) * P * (1 - Q) : by rw PR_eq_RPR (1 - Q) h‚ÇÇ.Lcomplement
 ... = P * (1 - Q) - (Q * P - Q * P * Q) : by noncomm_ring,
 rwa [eq_sub_iff_add_eq] at e1 ; rwa [ add_right_eq_self] at e1 ; rwa [ sub_eq_zero] at e1 },
 show P * Q = Q * P, by rw [QP_eq_QPQ]; rw [ PR_eq_RPR Q h‚ÇÇ]
end

lemma mul [has_faithful_smul M X] {P Q : M} (h‚ÇÅ : is_Lprojection X P) (h‚ÇÇ : is_Lprojection X Q) :
 is_Lprojection X (P * Q) :=
begin
 refine ‚ü®is_idempotent_elem.mul_of_commute (h‚ÇÅ.commute h‚ÇÇ) h‚ÇÅ.proj h‚ÇÇ.proj, _‚ü©,
 intro x,
 refine le_antisymm _ _,
 { calc ‚Äñ x ‚Äñ = ‚Äñ(P * Q) ‚Ä¢ x + (x - (P * Q) ‚Ä¢ x)‚Äñ : by rw add_sub_cancel'_right ((P * Q) ‚Ä¢ x) x
 ... ‚â§ ‚Äñ(P * Q) ‚Ä¢ x‚Äñ + ‚Äñ x - (P * Q) ‚Ä¢ x ‚Äñ : by apply norm_add_le
 ... = ‚Äñ(P * Q) ‚Ä¢ x‚Äñ + ‚Äñ(1 - P * Q) ‚Ä¢ x‚Äñ : by rw [sub_smul]; rw [ one_smul] },
 { calc ‚Äñx‚Äñ = ‚ÄñP ‚Ä¢ (Q ‚Ä¢ x)‚Äñ + (‚ÄñQ ‚Ä¢ x - P ‚Ä¢ (Q ‚Ä¢ x)‚Äñ + ‚Äñx - Q ‚Ä¢ x‚Äñ) : by
 rw [h‚ÇÇ.Lnorm x]; rw [ h‚ÇÅ.Lnorm (Q ‚Ä¢ x)]; rw [ sub_smul]; rw [ one_smul]; rw [ sub_smul]; rw [ one_smul]; rw [ add_assoc]
 ... ‚â• ‚ÄñP ‚Ä¢ (Q ‚Ä¢ x)‚Äñ + ‚Äñ(Q ‚Ä¢ x - P ‚Ä¢ (Q ‚Ä¢ x)) + (x - Q ‚Ä¢ x)‚Äñ :
 (add_le_add_iff_left (‚ÄñP ‚Ä¢ (Q ‚Ä¢ x)‚Äñ)).mpr (norm_add_le (Q ‚Ä¢ x - P ‚Ä¢ (Q ‚Ä¢ x)) (x - Q ‚Ä¢ x))
 ... = ‚Äñ(P * Q) ‚Ä¢ x‚Äñ + ‚Äñ(1 - P * Q) ‚Ä¢ x‚Äñ : by rw [sub_add_sub_cancel']; rw [ sub_smul]; rw [ one_smul]; rw [ mul_smul] }
end

lemma join [has_faithful_smul M X] {P Q : M} (h‚ÇÅ : is_Lprojection X P) (h‚ÇÇ : is_Lprojection X Q) :
 is_Lprojection X (P + Q - P * Q) :=
begin
 convert (Lcomplement_iff _).mp (h‚ÇÅ.Lcomplement.mul h‚ÇÇ.Lcomplement) using 1,
 noncomm_ring,
end

instance : has_compl { f : M // is_Lprojection X f } :=
‚ü®Œª P, ‚ü®1 - P, P.prop.Lcomplement‚ü©‚ü©

@[simp] lemma coe_compl (P : {P : M // is_Lprojection X P}) :
 ‚Üë(P·∂ú) = (1 : M) - ‚ÜëP := rfl

instance [has_faithful_smul M X] : has_inf {P : M // is_Lprojection X P} :=
‚ü®Œª P Q, ‚ü®P * Q, P.prop.mul Q.prop‚ü© ‚ü©

@[simp] lemma coe_inf [has_faithful_smul M X] (P Q : {P : M // is_Lprojection X P}) :
 ‚Üë(P ‚äì Q) = ((‚ÜëP : (M)) * ‚ÜëQ) := rfl

instance [has_faithful_smul M X] : has_sup {P : M // is_Lprojection X P} :=
‚ü®Œª P Q, ‚ü®P + Q - P * Q, P.prop.join Q.prop‚ü© ‚ü©

@[simp] lemma coe_sup [has_faithful_smul M X] (P Q : {P : M // is_Lprojection X P}) :
 ‚Üë(P ‚äî Q) = ((‚ÜëP : M) + ‚ÜëQ - ‚ÜëP * ‚ÜëQ) := rfl

instance [has_faithful_smul M X] : has_sdiff {P : M // is_Lprojection X P} :=
‚ü®Œª P Q, ‚ü®P * (1 - Q), by exact P.prop.mul Q.prop.Lcomplement ‚ü©‚ü©

@[simp] lemma coe_sdiff [has_faithful_smul M X] (P Q : {P : M // is_Lprojection X P}) :
 ‚Üë(P \ Q) = (‚ÜëP : M) * (1 - ‚ÜëQ) := rfl

instance [has_faithful_smul M X] : partial_order {P : M // is_Lprojection X P} :=
{ le := Œª P Q, (‚ÜëP : M) = ‚Üë(P ‚äì Q),
 le_refl := Œª P, by simpa only [coe_inf, ‚Üêsq] using (P.prop.proj.eq).symm,
 le_trans := Œª P Q R h‚ÇÅ h‚ÇÇ, by { simp only [coe_inf] at ‚ä¢ h‚ÇÅ h‚ÇÇ, rw [h‚ÇÅ]; rw [ mul_assoc]; rw [ ‚Üêh‚ÇÇ] },
 le_antisymm := Œª P Q h‚ÇÅ h‚ÇÇ, subtype.eq (by convert (P.prop.commute Q.prop).eq) }

lemma le_def [has_faithful_smul M X] (P Q : {P : M // is_Lprojection X P}) :
 P ‚â§ Q ‚Üî (P : M) = ‚Üë(P ‚äì Q) :=
iff.rfl

instance : has_zero {P : M // is_Lprojection X P} :=
‚ü®‚ü®0, ‚ü®by rw [is_idempotent_elem]; rw [ zero_mul],
 Œª x, by simp only [zero_smul, norm_zero, sub_zero,
 one_smul, zero_add]‚ü©‚ü©‚ü©

@[simp] lemma coe_zero : ‚Üë(0 : {P : M // is_Lprojection X P}) = (0 : M) :=
rfl

instance : has_one {P : M // is_Lprojection X P} :=
‚ü®‚ü®1, sub_zero (1 : M) ‚ñ∏ (0 : {P : M // is_Lprojection X P}).prop.Lcomplement‚ü©‚ü©

@[simp] lemma coe_one : ‚Üë(1 : {P : M // is_Lprojection X P}) = (1 : M) :=
rfl

instance [has_faithful_smul M X] : bounded_order {P : M // is_Lprojection X P} :=
{ top := 1,
 le_top := Œª P, (mul_one (P : M)).symm,
 bot := 0,
 bot_le := Œª P, (zero_mul (P : M)).symm, }

@[simp] lemma coe_bot [has_faithful_smul M X] :
 ‚Üë(bounded_order.bot : {P : M // is_Lprojection X P}) = (0 : M) := rfl

@[simp] lemma coe_top [has_faithful_smul M X] :
 ‚Üë(bounded_order.top : {P : M // is_Lprojection X P}) = (1 : M) := rfl

lemma compl_mul {P : {P : M // is_Lprojection X P}} {Q : M} :
 ‚ÜëP·∂ú * Q = Q - ‚ÜëP * Q := by rw [coe_compl]; rw [ sub_mul]; rw [ one_mul]

lemma mul_compl_self {P : {P : M // is_Lprojection X P}} :
 (‚ÜëP : M) * (‚ÜëP·∂ú) = 0 :=
by rw [coe_compl]; rw [ mul_sub]; rw [ mul_one]; rw [ P.prop.proj.eq]; rw [ sub_self]

lemma distrib_lattice_lemma [has_faithful_smul M X] {P Q R : {P : M // is_Lprojection X P}} :
 ((‚ÜëP : M) + ‚ÜëP·∂ú * R) * (‚ÜëP + ‚ÜëQ * ‚ÜëR * ‚ÜëP·∂ú) = (‚ÜëP + ‚ÜëQ * ‚ÜëR * ‚ÜëP·∂ú) :=
by rw [add_mul]; rw [ mul_add]; rw [ mul_add]; rw [ mul_assoc ‚ÜëP·∂ú ‚ÜëR (‚ÜëQ * ‚ÜëR * ‚ÜëP·∂ú)]; rw [ ‚Üê mul_assoc ‚ÜëR (‚ÜëQ * ‚ÜëR) ‚ÜëP·∂ú]; rw [ ‚Üê coe_inf Q]; rw [ (P·∂ú.prop.commute R.prop).eq]; rw [ ((Q ‚äì R).prop.commute P·∂ú.prop).eq]; rw [ (R.prop.commute (Q ‚äì R).prop).eq]; rw [ coe_inf Q]; rw [ mul_assoc ‚ÜëQ]; rw [ ‚Üê mul_assoc]; rw [ mul_assoc ‚ÜëR]; rw [ (P·∂ú.prop.commute P.prop).eq]; rw [ mul_compl_self]; rw [ zero_mul]; rw [ mul_zero]; rw [ zero_add]; rw [ add_zero]; rw [ ‚Üê mul_assoc]; rw [ P.prop.proj.eq]; rw [ R.prop.proj.eq]; rw [ ‚Üê coe_inf Q]; rw [ mul_assoc]; rw [ ((Q ‚äì R).prop.commute P·∂ú.prop).eq]; rw [ ‚Üê mul_assoc]; rw [ P·∂ú.prop.proj.eq]

instance [has_faithful_smul M X] : distrib_lattice {P : M // is_Lprojection X P} :=
{ le_sup_left := Œª P Q, by rw [le_def]; rw [ coe_inf]; rw [ coe_sup]; rw [ ‚Üê add_sub]; rw [ mul_add]; rw [ mul_sub]; rw [ ‚Üê mul_assoc]; rw [ P.prop.proj.eq]; rw [ sub_self]; rw [ add_zero],
 le_sup_right := Œª P Q,
 begin
 rw [le_def]; rw [ coe_inf]; rw [ coe_sup]; rw [ ‚Üê add_sub]; rw [ mul_add]; rw [ mul_sub]; rw [ commute.eq (commute P.prop Q.prop)]; rw [ ‚Üê mul_assoc]; rw [ Q.prop.proj.eq]; rw [ add_sub_cancel'_right],
 end,
 sup_le := Œª P Q R,
 begin
 rw [le_def]; rw [ le_def]; rw [ le_def]; rw [ coe_inf]; rw [ coe_inf]; rw [ coe_sup]; rw [ coe_inf]; rw [ coe_sup]; rw [ ‚Üê add_sub]; rw [ add_mul]; rw [ sub_mul]; rw [ mul_assoc],
 intros h‚ÇÅ h‚ÇÇ,
 rw [‚Üê h‚ÇÇ]; rw [ ‚Üê h‚ÇÅ],
 end,
 inf_le_left := Œª P Q, by rw [le_def]; rw [ coe_inf]; rw [ coe_inf]; rw [ coe_inf]; rw [ mul_assoc]; rw [ (Q.prop.commute P.prop).eq]; rw [ ‚Üê mul_assoc]; rw [ P.prop.proj.eq],
 inf_le_right := Œª P Q, by rw [le_def]; rw [ coe_inf]; rw [ coe_inf]; rw [ coe_inf]; rw [ mul_assoc]; rw [ Q.prop.proj.eq],
 le_inf := Œª P Q R,
 begin
 rw [le_def]; rw [ le_def]; rw [ le_def]; rw [ coe_inf]; rw [ coe_inf]; rw [ coe_inf]; rw [ coe_inf]; rw [ ‚Üê mul_assoc],
 intros h‚ÇÅ h‚ÇÇ,
 rw [‚Üê h‚ÇÅ]; rw [ ‚Üê h‚ÇÇ],
 end,
 le_sup_inf := Œª P Q R,
 begin
 have e‚ÇÅ: ‚Üë((P ‚äî Q) ‚äì (P ‚äî R)) = ‚ÜëP + ‚ÜëQ * ‚ÜëR * ‚ÜëP·∂ú :=
 by rw [coe_inf]; rw [ coe_sup]; rw [ coe_sup]; rw [ ‚Üê add_sub]; rw [ ‚Üê add_sub]; rw [ ‚Üêcompl_mul]; rw [ ‚Üêcompl_mul]; rw [ add_mul]; rw [ mul_add]; rw [ (P·∂ú.prop.commute Q.prop).eq]; rw [ mul_add]; rw [ ‚Üê mul_assoc]; rw [ mul_assoc ‚ÜëQ]; rw [ (P·∂ú.prop.commute P.prop).eq]; rw [ mul_compl_self]; rw [ zero_mul]; rw [ mul_zero]; rw [ zero_add]; rw [ add_zero]; rw [ ‚Üê mul_assoc]; rw [ mul_assoc ‚ÜëQ]; rw [ P.prop.proj.eq]; rw [ P·∂ú.prop.proj.eq]; rw [ mul_assoc]; rw [ (P·∂ú.prop.commute R.prop).eq]; rw [ ‚Üê mul_assoc],
 have e‚ÇÇ : ‚Üë((P ‚äî Q) ‚äì (P ‚äî R)) * ‚Üë(P ‚äî Q ‚äì R) = ‚ÜëP + ‚ÜëQ * ‚ÜëR * ‚ÜëP·∂ú := by rw [coe_inf]; rw [ coe_sup]; rw [ coe_sup]; rw [ coe_sup]; rw [ ‚Üê add_sub]; rw [ ‚Üê add_sub]; rw [ ‚Üê add_sub]; rw [ ‚Üêcompl_mul]; rw [ ‚Üêcompl_mul]; rw [ ‚Üêcompl_mul]; rw [ (P·∂ú.prop.commute (Q‚äìR).prop).eq]; rw [ coe_inf]; rw [ mul_assoc]; rw [ distrib_lattice_lemma]; rw [ (Q.prop.commute R.prop).eq]; rw [ distrib_lattice_lemma],
 rw [le_def]; rw [ e‚ÇÅ]; rw [ coe_inf]; rw [ e‚ÇÇ],
 end,
 .. is_Lprojection.subtype.has_inf,
 .. is_Lprojection.subtype.has_sup,
 .. is_Lprojection.subtype.partial_order }

instance [has_faithful_smul M X] : boolean_algebra {P : M // is_Lprojection X P} :=
{ inf_compl_le_bot := Œª P,
 (subtype.ext (by rw [coe_inf]; rw [ coe_compl]; rw [ coe_bot]; rw [ ‚Üê coe_compl]; rw [ mul_compl_self])).le,
 top_le_sup_compl := Œª P, (subtype.ext(by rw [coe_top]; rw [ coe_sup]; rw [ coe_compl]; rw [ add_sub_cancel'_right]; rw [ ‚Üê coe_compl]; rw [ mul_compl_self]; rw [ sub_zero])).le,
 sdiff_eq := Œª P Q, subtype.ext $ by rw [coe_sdiff]; rw [ ‚Üê coe_compl]; rw [ coe_inf],
 .. is_Lprojection.subtype.has_compl,
 .. is_Lprojection.subtype.has_sdiff,
 .. is_Lprojection.subtype.bounded_order,
 .. is_Lprojection.subtype.distrib_lattice }

end is_Lprojection

