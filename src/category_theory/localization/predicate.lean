/-
Copyright (c) 2022 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/

import category_theory.localization.construction

/-!

# Predicate for localized categories

> THIS FILE IS SYNCHRONIZED WITH MATHLIB4.
> Any changes to this file require a corresponding PR to mathlib4.

In this file, a predicate `L.is_localization W` is introduced for a functor `L : C ‚•§ D`
and `W : morphism_property C`: it expresses that `L` identifies `D` with the localized
category of `C` with respect to `W` (up to equivalence).

We introduce a universal property `strict_universal_property_fixed_target L W E` which
states that `L` inverts the morphisms in `W` and that all functors `C ‚•§ E` inverting
`W` uniquely factors as a composition of `L ‚ãô G` with `G : D ‚•§ E`. Such universal
properties are inputs for the constructor `is_localization.mk'` for `L.is_localization W`.

When `L : C ‚•§ D` is a localization functor for `W : morphism_property` (i.e. when
`[L.is_localization W]` holds), for any category `E`, there is
an equivalence `functor_equivalence L W E : (D ‚•§ E) ‚âå (W.functors_inverting E)`
that is induced by the composition with the functor `L`. When two functors
`F : C ‚•§ E` and `F' : D ‚•§ E` correspond via this equivalence, we shall say
that `F'` lifts `F`, and the associated isomorphism `L ‚ãô F' ‚âÖ F` is the
datum that is part of the class `lifting L W F F'`. The functions
`lift_nat_trans` and `lift_nat_iso` can be used to lift natural transformations
and natural isomorphisms between functors.

-/

noncomputable theory

namespace category_theory

open category

variables {C D : Type*} [category C] [category D]
  (L : C ‚•§ D) (W : morphism_property C)
  (E : Type*) [category E]

namespace functor

/-- The predicate expressing that, up to equivalence, a functor `L : C ‚•§ D`
identifies the category `D` with the localized category of `C` with respect
to `W : morphism_property C`. -/
class is_localization : Prop :=
(inverts : W.is_inverted_by L)
(nonempty_is_equivalence : nonempty (is_equivalence (localization.construction.lift L inverts)))

instance Q_is_localization : W.Q.is_localization W :=
{ inverts := W.Q_inverts,
  nonempty_is_equivalence := begin
    suffices : localization.construction.lift W.Q W.Q_inverts = ùü≠ _,
    { apply nonempty.intro, rw this, apply_instance, },
    apply localization.construction.uniq,
    simpa only [localization.construction.fac],
  end, }

end functor

namespace localization

/-- This universal property states that a functor `L : C ‚•§ D` inverts morphisms
in `W` and the all functors `D ‚•§ E` (for a fixed category `E`) uniquely factors
through `L`. -/
structure strict_universal_property_fixed_target :=
(inverts : W.is_inverted_by L)
(lift : Œ† (F : C ‚•§ E) (hF : W.is_inverted_by F), D ‚•§ E)
(fac : Œ† (F : C ‚•§ E) (hF : W.is_inverted_by F), L ‚ãô lift F hF = F)
(uniq : Œ† (F‚ÇÅ F‚ÇÇ : D ‚•§ E) (h : L ‚ãô F‚ÇÅ = L ‚ãô F‚ÇÇ), F‚ÇÅ = F‚ÇÇ)

/-- The localized category `W.localization` that was constructed satisfies
the universal property of the localization. -/
@[simps]
def strict_universal_property_fixed_target_Q :
  strict_universal_property_fixed_target W.Q W E :=
{ inverts := W.Q_inverts,
  lift := construction.lift,
  fac := construction.fac,
  uniq := construction.uniq, }

instance : inhabited (strict_universal_property_fixed_target W.Q W E) :=
‚ü®strict_universal_property_fixed_target_Q _ _‚ü©

/-- When `W` consists of isomorphisms, the identity satisfies the universal property
of the localization. -/
@[simps]
def strict_universal_property_fixed_target_id (hW : W ‚äÜ morphism_property.isomorphisms C):
  strict_universal_property_fixed_target (ùü≠ C) W E :=
{ inverts := Œª X Y f hf, hW f hf,
  lift := Œª F hF, F,
  fac := Œª F hF, by { cases F, refl, },
  uniq := Œª F‚ÇÅ F‚ÇÇ eq, by { cases F‚ÇÅ, cases F‚ÇÇ, exact eq, }, }

end localization

namespace functor

lemma is_localization.mk'
  (h‚ÇÅ : localization.strict_universal_property_fixed_target L W D)
  (h‚ÇÇ : localization.strict_universal_property_fixed_target L W W.localization) :
  is_localization L W :=
{ inverts := h‚ÇÅ.inverts,
  nonempty_is_equivalence := nonempty.intro
  { inverse := h‚ÇÇ.lift W.Q W.Q_inverts,
    unit_iso := eq_to_iso (localization.construction.uniq _ _
      (by simp only [‚Üê functor.assoc, localization.construction.fac, h‚ÇÇ.fac, functor.comp_id])),
    counit_iso := eq_to_iso (h‚ÇÅ.uniq _ _ (by simp only [‚Üê functor.assoc, h‚ÇÇ.fac,
      localization.construction.fac, functor.comp_id])),
    functor_unit_iso_comp' := Œª X, by simpa only [eq_to_iso.hom, eq_to_hom_app,
      eq_to_hom_map, eq_to_hom_trans, eq_to_hom_refl], }, }

lemma is_localization.for_id (hW : W ‚äÜ morphism_property.isomorphisms C):
  (ùü≠ C).is_localization W :=
is_localization.mk' _ _
  (localization.strict_universal_property_fixed_target_id W _ hW)
  (localization.strict_universal_property_fixed_target_id W _ hW)

end functor

namespace localization

variable [L.is_localization W]

lemma inverts : W.is_inverted_by L := (infer_instance : L.is_localization W).inverts

/-- The isomorphism `L.obj X ‚âÖ L.obj Y` that is deduced from a morphism `f : X ‚ü∂ Y` which
belongs to `W`, when `L.is_localization W`. -/
@[simps]
def iso_of_hom {X Y : C} (f : X ‚ü∂ Y) (hf : W f) : L.obj X ‚âÖ L.obj Y :=
by { haveI : is_iso (L.map f) := inverts L W f hf, exact as_iso (L.map f), }

instance : is_equivalence (localization.construction.lift L (inverts L W)) :=
(infer_instance : L.is_localization W).nonempty_is_equivalence.some

/-- A chosen equivalence of categories `W.localization ‚âÖ D` for a functor
`L : C ‚•§ D` which satisfies `L.is_localization W`. This shall be used in
order to deduce properties of `L` from properties of `W.Q`. -/
def equivalence_from_model : W.localization ‚âå D :=
(localization.construction.lift L (inverts L W)).as_equivalence

/-- Via the equivalence of categories `equivalence_from_model L W : W.localization ‚âå D`,
one may identify the functors `W.Q` and `L`. -/
def Q_comp_equivalence_from_model_functor_iso :
  W.Q ‚ãô (equivalence_from_model L W).functor ‚âÖ L := eq_to_iso (construction.fac _ _)

/-- Via the equivalence of categories `equivalence_from_model L W : W.localization ‚âå D`,
one may identify the functors `L` and `W.Q`. -/
def comp_equivalence_from_model_inverse_iso :
  L ‚ãô (equivalence_from_model L W).inverse ‚âÖ W.Q :=
calc L ‚ãô (equivalence_from_model L W).inverse ‚âÖ _ :
  iso_whisker_right (Q_comp_equivalence_from_model_functor_iso L W).symm _
... ‚âÖ W.Q ‚ãô ((equivalence_from_model L W).functor ‚ãô (equivalence_from_model L W).inverse) :
  functor.associator _ _ _
... ‚âÖ W.Q ‚ãô ùü≠ _ : iso_whisker_left _ ((equivalence_from_model L W).unit_iso.symm)
... ‚âÖ W.Q : functor.right_unitor _

lemma ess_surj : ess_surj L :=
‚ü®Œª X, ‚ü®(construction.obj_equiv W).inv_fun ((equivalence_from_model L W).inverse.obj X),
  nonempty.intro ((Q_comp_equivalence_from_model_functor_iso L W).symm.app _ ‚â™‚â´
  (equivalence_from_model L W).counit_iso.app X)‚ü©‚ü©

/-- The functor `(D ‚•§ E) ‚•§ W.functors_inverting E` induced by the composition
with a localization functor `L : C ‚•§ D` with respect to `W : morphism_property C`. -/
def whiskering_left_functor : (D ‚•§ E) ‚•§ W.functors_inverting E :=
full_subcategory.lift _ ((whiskering_left _ _ E).obj L)
  (morphism_property.is_inverted_by.of_comp W L (inverts L W ))

instance : is_equivalence (whiskering_left_functor L W E) :=
begin
  refine is_equivalence.of_iso _ (is_equivalence.of_equivalence
    ((equivalence.congr_left (equivalence_from_model L W).symm).trans
    (construction.whiskering_left_equivalence W E))),
  refine nat_iso.of_components (Œª F, eq_to_iso begin
    ext,
    change (W.Q ‚ãô (localization.construction.lift L (inverts L W))) ‚ãô F = L ‚ãô F,
    rw construction.fac,
  end)
  (Œª F‚ÇÅ F‚ÇÇ œÑ, begin
    ext X,
    dsimp [equivalence_from_model, whisker_left, construction.whiskering_left_equivalence,
      construction.whiskering_left_equivalence.functor, whiskering_left_functor,
      morphism_property.Q],
    erw [nat_trans.comp_app, nat_trans.comp_app, eq_to_hom_app, eq_to_hom_app,
      eq_to_hom_refl, eq_to_hom_refl, comp_id, id_comp],
    all_goals
    { change (W.Q ‚ãô (localization.construction.lift L (inverts L W))) ‚ãô _ = L ‚ãô _,
      rw construction.fac, },
  end),
end

/-- The equivalence of categories `(D ‚•§ E) ‚âå (W.functors_inverting E)` induced by
the composition with a localization functor `L : C ‚•§ D` with respect to
`W : morphism_property C`. -/
def functor_equivalence : (D ‚•§ E) ‚âå (W.functors_inverting E) :=
(whiskering_left_functor L W E).as_equivalence

include W

/-- The functor `(D ‚•§ E) ‚•§ (C ‚•§ E)` given by the composition with a localization
functor `L : C ‚•§ D` with respect to `W : morphism_property C`. -/
@[nolint unused_arguments]
def whiskering_left_functor' :
  (D ‚•§ E) ‚•§ (C ‚•§ E) := (whiskering_left C D E).obj L

lemma whiskering_left_functor'_eq :
  whiskering_left_functor' L W E =
    localization.whiskering_left_functor L W E ‚ãô induced_functor _ := rfl

variable {E}

@[simp]
lemma whiskering_left_functor'_obj
  (F : D ‚•§ E) : (whiskering_left_functor' L W E).obj F = L ‚ãô F := rfl

instance : full (whiskering_left_functor' L W E) :=
by { rw whiskering_left_functor'_eq, apply_instance, }

instance : faithful (whiskering_left_functor' L W E) :=
by { rw whiskering_left_functor'_eq, apply_instance, }

lemma nat_trans_ext {F‚ÇÅ F‚ÇÇ : D ‚•§ E} (œÑ œÑ' : F‚ÇÅ ‚ü∂ F‚ÇÇ)
  (h : ‚àÄ (X : C), œÑ.app (L.obj X) = œÑ'.app (L.obj X)) : œÑ = œÑ' :=
begin
  haveI : category_theory.ess_surj L := ess_surj L W,
  ext Y,
  rw [‚Üê cancel_epi (F‚ÇÅ.map (L.obj_obj_preimage_iso Y).hom), œÑ.naturality, œÑ'.naturality, h],
end

/-- When `L : C ‚•§ D` is a localization functor for `W : morphism_property C` and
`F : C ‚•§ E` is a functor, we shall say that `F' : D ‚•§ E` lifts `F` if the obvious diagram
is commutative up to an isomorphism. -/
class lifting (F : C ‚•§ E) (F' : D ‚•§ E) :=
(iso [] : L ‚ãô F' ‚âÖ F)

variable {W}

/-- Given a localization functor `L : C ‚•§ D` for `W : morphism_property C` and
a functor `F : C ‚•§ E` which inverts `W`, this is a choice of functor
`D ‚•§ E` which lifts `F`. -/
def lift (F : C ‚•§ E) (hF : W.is_inverted_by F) (L : C ‚•§ D) [hL : L.is_localization W] :
  D ‚•§ E :=
(functor_equivalence L W E).inverse.obj ‚ü®F, hF‚ü©

instance lifting_lift (F : C ‚•§ E) (hF : W.is_inverted_by F) (L : C ‚•§ D)
  [hL : L.is_localization W] : lifting L W F (lift F hF L) :=
‚ü®(induced_functor _).map_iso ((functor_equivalence L W E).counit_iso.app ‚ü®F, hF‚ü©)‚ü©

/-- The canonical isomorphism `L ‚ãô lift F hF L ‚âÖ F` for any functor `F : C ‚•§ E`
which inverts `W`, when `L : C ‚•§ D` is a localization functor for `W`. -/
@[simps]
def fac (F : C ‚•§ E) (hF : W.is_inverted_by F) (L : C ‚•§ D) [hL : L.is_localization W] :
  L ‚ãô lift F hF L ‚âÖ F :=
lifting.iso _ W _ _

instance lifting_construction_lift (F : C ‚•§ D) (hF : W.is_inverted_by F) :
  lifting W.Q W F (construction.lift F hF) :=
‚ü®eq_to_iso (construction.fac F hF)‚ü©

variable (W)

/-- Given a localization functor `L : C ‚•§ D` for `W : morphism_property C`,
if `(F‚ÇÅ' F‚ÇÇ' : D ‚•§ E)` are functors which lifts functors `(F‚ÇÅ F‚ÇÇ : C ‚•§ E)`,
a natural transformation `œÑ : F‚ÇÅ ‚ü∂ F‚ÇÇ` uniquely lifts to a natural transformation `F‚ÇÅ' ‚ü∂ F‚ÇÇ'`. -/
def lift_nat_trans (F‚ÇÅ F‚ÇÇ : C ‚•§ E) (F‚ÇÅ' F‚ÇÇ' : D ‚•§ E) [lifting L W F‚ÇÅ F‚ÇÅ']
  [h‚ÇÇ : lifting L W F‚ÇÇ F‚ÇÇ'] (œÑ : F‚ÇÅ ‚ü∂ F‚ÇÇ) : F‚ÇÅ' ‚ü∂ F‚ÇÇ' :=
(whiskering_left_functor' L W E).preimage
  ((lifting.iso L W F‚ÇÅ F‚ÇÅ').hom ‚â´ œÑ ‚â´ (lifting.iso L W F‚ÇÇ F‚ÇÇ').inv)

@[simp]
lemma lift_nat_trans_app (F‚ÇÅ F‚ÇÇ : C ‚•§ E) (F‚ÇÅ' F‚ÇÇ' : D ‚•§ E) [lifting L W F‚ÇÅ F‚ÇÅ']
  [lifting L W F‚ÇÇ F‚ÇÇ'] (œÑ : F‚ÇÅ ‚ü∂ F‚ÇÇ) (X : C) :
  (lift_nat_trans L W F‚ÇÅ F‚ÇÇ F‚ÇÅ' F‚ÇÇ' œÑ).app (L.obj X) =
    (lifting.iso L W F‚ÇÅ F‚ÇÅ').hom.app X ‚â´ œÑ.app X ‚â´ ((lifting.iso L W F‚ÇÇ F‚ÇÇ')).inv.app X :=
congr_app (functor.image_preimage (whiskering_left_functor' L W E) _) X

@[simp, reassoc]
lemma comp_lift_nat_trans (F‚ÇÅ F‚ÇÇ F‚ÇÉ : C ‚•§ E) (F‚ÇÅ' F‚ÇÇ' F‚ÇÉ' : D ‚•§ E)
  [h‚ÇÅ : lifting L W F‚ÇÅ F‚ÇÅ'] [h‚ÇÇ : lifting L W F‚ÇÇ F‚ÇÇ'] [h‚ÇÉ : lifting L W F‚ÇÉ F‚ÇÉ']
  (œÑ : F‚ÇÅ ‚ü∂ F‚ÇÇ) (œÑ' : F‚ÇÇ ‚ü∂ F‚ÇÉ) :
  lift_nat_trans L W F‚ÇÅ F‚ÇÇ F‚ÇÅ' F‚ÇÇ' œÑ ‚â´ lift_nat_trans L W F‚ÇÇ F‚ÇÉ F‚ÇÇ' F‚ÇÉ' œÑ' =
  lift_nat_trans L W F‚ÇÅ F‚ÇÉ F‚ÇÅ' F‚ÇÉ' (œÑ ‚â´ œÑ') :=
nat_trans_ext L W _ _
  (Œª X, by simp only [nat_trans.comp_app, lift_nat_trans_app, assoc, iso.inv_hom_id_app_assoc])

@[simp]
lemma lift_nat_trans_id (F : C ‚•§ E) (F' : D ‚•§ E) [h : lifting L W F F'] :
  lift_nat_trans L W F F F' F' (ùüô F) = ùüô F' :=
nat_trans_ext L W _ _
  (Œª X, by simpa only [lift_nat_trans_app, nat_trans.id_app, id_comp, iso.hom_inv_id_app])

/-- Given a localization functor `L : C ‚•§ D` for `W : morphism_property C`,
if `(F‚ÇÅ' F‚ÇÇ' : D ‚•§ E)` are functors which lifts functors `(F‚ÇÅ F‚ÇÇ : C ‚•§ E)`,
a natural isomorphism `œÑ : F‚ÇÅ ‚ü∂ F‚ÇÇ` lifts to a natural isomorphism `F‚ÇÅ' ‚ü∂ F‚ÇÇ'`. -/
@[simps]
def lift_nat_iso (F‚ÇÅ F‚ÇÇ : C ‚•§ E) (F‚ÇÅ' F‚ÇÇ' : D ‚•§ E)
  [h‚ÇÅ : lifting L W F‚ÇÅ F‚ÇÅ'] [h‚ÇÇ : lifting L W F‚ÇÇ F‚ÇÇ']
  (e : F‚ÇÅ ‚âÖ F‚ÇÇ) : F‚ÇÅ' ‚âÖ F‚ÇÇ' :=
{ hom := lift_nat_trans L W F‚ÇÅ F‚ÇÇ F‚ÇÅ' F‚ÇÇ' e.hom,
  inv := lift_nat_trans L W F‚ÇÇ F‚ÇÅ F‚ÇÇ' F‚ÇÅ' e.inv, }

namespace lifting

@[simps]
instance comp_right {E' : Type*} [category E'] (F : C ‚•§ E) (F' : D ‚•§ E) [lifting L W F F']
  (G : E ‚•§ E') : lifting L W (F ‚ãô G) (F' ‚ãô G) :=
‚ü®iso_whisker_right (iso L W F F') G‚ü©

@[simps]
instance id : lifting L W L (ùü≠ D) :=
‚ü®functor.right_unitor L‚ü©

/-- Given a localization functor `L : C ‚•§ D` for `W : morphism_property C`,
if `F‚ÇÅ' : D ‚•§ E` lifts a functor `F‚ÇÅ : C ‚•§ D`, then a functor `F‚ÇÇ'` which
is isomorphic to `F‚ÇÅ'` also lifts a functor `F‚ÇÇ` that is isomorphic to `F‚ÇÅ`.  -/
@[simps]
def of_isos {F‚ÇÅ F‚ÇÇ : C ‚•§ E} {F‚ÇÅ' F‚ÇÇ' : D ‚•§ E} (e : F‚ÇÅ ‚âÖ F‚ÇÇ) (e' : F‚ÇÅ' ‚âÖ F‚ÇÇ')
  [lifting L W F‚ÇÅ F‚ÇÅ'] : lifting L W F‚ÇÇ F‚ÇÇ' :=
‚ü®iso_whisker_left L e'.symm ‚â™‚â´ iso L W F‚ÇÅ F‚ÇÅ' ‚â™‚â´ e‚ü©

end lifting

end localization

namespace functor

namespace is_localization

open localization

lemma of_iso {L‚ÇÅ L‚ÇÇ : C ‚•§ D} (e : L‚ÇÅ ‚âÖ L‚ÇÇ) [L‚ÇÅ.is_localization W] : L‚ÇÇ.is_localization W :=
begin
  have h := localization.inverts L‚ÇÅ W,
  rw morphism_property.is_inverted_by.iff_of_iso W e at h,
  let F‚ÇÅ := localization.construction.lift L‚ÇÅ (localization.inverts L‚ÇÅ W),
  let F‚ÇÇ := localization.construction.lift L‚ÇÇ h,
  exact
  { inverts := h,
    nonempty_is_equivalence := nonempty.intro
      (is_equivalence.of_iso (lift_nat_iso W.Q W L‚ÇÅ L‚ÇÇ F‚ÇÅ F‚ÇÇ e) infer_instance), },
end

/-- If `L : C ‚•§ D` is a localization for `W : morphism_property C`, then it is also
the case of a functor obtained by post-composing `L` with an equivalence of categories. -/
lemma of_equivalence_target {E : Type*} [category E] (L' : C ‚•§ E) (eq : D ‚âå E)
  [L.is_localization W] (e : L ‚ãô eq.functor ‚âÖ L') : L'.is_localization W :=
begin
  have h : W.is_inverted_by L',
  { rw ‚Üê morphism_property.is_inverted_by.iff_of_iso W e,
    exact morphism_property.is_inverted_by.of_comp W L (localization.inverts L W) eq.functor, },
  let F‚ÇÅ := localization.construction.lift L (localization.inverts L W),
  let F‚ÇÇ := localization.construction.lift L' h,
  let e' : F‚ÇÅ ‚ãô eq.functor ‚âÖ F‚ÇÇ := lift_nat_iso W.Q W (L ‚ãô eq.functor) L' _ _ e,
  exact
  { inverts := h,
    nonempty_is_equivalence := nonempty.intro (is_equivalence.of_iso e' infer_instance) },
end

end is_localization

end functor

end category_theory
