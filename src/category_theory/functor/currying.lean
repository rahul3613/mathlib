/-
Copyright (c) 2017 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Scott Morrison
-/
import category_theory.products.bifunctor

/-!
# Curry and uncurry, as functors.

> THIS FILE IS SYNCHRONIZED WITH MATHLIB4.
> Any changes to this file require a corresponding PR to mathlib4.

We define `curry : ((C √ó D) ‚•§ E) ‚•§ (C ‚•§ (D ‚•§ E))` and `uncurry : (C ‚•§ (D ‚•§ E)) ‚•§ ((C √ó D) ‚•§ E)`,
and verify that they provide an equivalence of categories
`currying : (C ‚•§ (D ‚•§ E)) ‚âå ((C √ó D) ‚•§ E)`.

-/
namespace category_theory

universes v‚ÇÅ v‚ÇÇ v‚ÇÉ v‚ÇÑ u‚ÇÅ u‚ÇÇ u‚ÇÉ u‚ÇÑ

variables {B : Type u‚ÇÅ} [category.{v‚ÇÅ} B]
          {C : Type u‚ÇÇ} [category.{v‚ÇÇ} C]
          {D : Type u‚ÇÉ} [category.{v‚ÇÉ} D]
          {E : Type u‚ÇÑ} [category.{v‚ÇÑ} E]

/--
The uncurrying functor, taking a functor `C ‚•§ (D ‚•§ E)` and producing a functor `(C √ó D) ‚•§ E`.
-/
@[simps]
def uncurry : (C ‚•§ (D ‚•§ E)) ‚•§ ((C √ó D) ‚•§ E) :=
{ obj := Œª F,
  { obj := Œª X, (F.obj X.1).obj X.2,
    map := Œª X Y f, (F.map f.1).app X.2 ‚â´ (F.obj Y.1).map f.2,
    map_comp' := Œª X Y Z f g,
    begin
      simp only [prod_comp_fst, prod_comp_snd, functor.map_comp,
                 nat_trans.comp_app, category.assoc],
      slice_lhs 2 3 { rw ‚Üê nat_trans.naturality },
      rw category.assoc,
    end },
  map := Œª F G T,
  { app := Œª X, (T.app X.1).app X.2,
    naturality' := Œª X Y f,
    begin
      simp only [prod_comp_fst, prod_comp_snd, category.comp_id, category.assoc,
        functor.map_id, functor.map_comp, nat_trans.id_app, nat_trans.comp_app],
      slice_lhs 2 3 { rw nat_trans.naturality },
      slice_lhs 1 2 { rw [‚Üênat_trans.comp_app, nat_trans.naturality, nat_trans.comp_app] },
      rw category.assoc,
    end } }.

/--
The object level part of the currying functor. (See `curry` for the functorial version.)
-/
def curry_obj (F : (C √ó D) ‚•§ E) : C ‚•§ (D ‚•§ E) :=
{ obj := Œª X,
    { obj := Œª Y, F.obj (X, Y),
      map := Œª Y Y' g, F.map (ùüô X, g) },
    map := Œª X X' f, { app := Œª Y, F.map (f, ùüô Y) } }

/--
The currying functor, taking a functor `(C √ó D) ‚•§ E` and producing a functor `C ‚•§ (D ‚•§ E)`.
-/
@[simps obj_obj_obj obj_obj_map obj_map_app map_app_app]
def curry : ((C √ó D) ‚•§ E) ‚•§ (C ‚•§ (D ‚•§ E)) :=
{ obj := Œª F, curry_obj F,
  map := Œª F G T,
  { app := Œª X,
    { app := Œª Y, T.app (X, Y),
      naturality' := Œª Y Y' g,
      begin
        dsimp [curry_obj],
        rw nat_trans.naturality,
      end },
    naturality' := Œª X X' f,
    begin
      ext, dsimp [curry_obj],
      rw nat_trans.naturality,
    end } }.

/--
The equivalence of functor categories given by currying/uncurrying.
-/
@[simps] -- create projection simp lemmas even though this isn't a `{ .. }`.
def currying : (C ‚•§ (D ‚•§ E)) ‚âå ((C √ó D) ‚•§ E) :=
equivalence.mk uncurry curry
  (nat_iso.of_components (Œª F, nat_iso.of_components
    (Œª X, nat_iso.of_components (Œª Y, iso.refl _) (by tidy)) (by tidy)) (by tidy))
  (nat_iso.of_components (Œª F, nat_iso.of_components
    (Œª X, eq_to_iso (by simp)) (by tidy)) (by tidy))

/-- `F.flip` is isomorphic to uncurrying `F`, swapping the variables, and currying. -/
@[simps]
def flip_iso_curry_swap_uncurry (F : C ‚•§ D ‚•§ E) :
  F.flip ‚âÖ curry.obj (prod.swap _ _ ‚ãô uncurry.obj F) :=
nat_iso.of_components (Œª d, nat_iso.of_components (Œª c, iso.refl _) (by tidy)) (by tidy)

/-- The uncurrying of `F.flip` is isomorphic to
swapping the factors followed by the uncurrying of `F`. -/
@[simps]
def uncurry_obj_flip (F : C ‚•§ D ‚•§ E) : uncurry.obj F.flip ‚âÖ prod.swap _ _ ‚ãô uncurry.obj F :=
nat_iso.of_components (Œª p, iso.refl _) (by tidy)

variables (B C D E)

/--
A version of `category_theory.whiskering_right` for bifunctors, obtained by uncurrying,
applying `whiskering_right` and currying back
-/
@[simps] def whiskering_right‚ÇÇ : (C ‚•§ D ‚•§ E) ‚•§ ((B ‚•§ C) ‚•§ (B ‚•§ D) ‚•§ (B ‚•§ E)) :=
uncurry ‚ãô (whiskering_right _ _ _) ‚ãô
((whiskering_left _ _ _).obj (prod_functor_to_functor_prod _ _ _)) ‚ãô curry

end category_theory
