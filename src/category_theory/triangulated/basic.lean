/-
Copyright (c) 2021 Luke Kershaw. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Luke Kershaw
-/
import data.int.basic
import category_theory.shift.basic

/-!
# Triangles

> THIS FILE IS SYNCHRONIZED WITH MATHLIB4.
> Any changes to this file require a corresponding PR to mathlib4.

This file contains the definition of triangles in an additive category with an additive shift.
It also defines morphisms between these triangles.

TODO: generalise this to n-angles in n-angulated categories as in https://arxiv.org/abs/1006.4592
-/

noncomputable theory

open category_theory
open category_theory.limits

universes v v‚ÇÄ v‚ÇÅ v‚ÇÇ u u‚ÇÄ u‚ÇÅ u‚ÇÇ

namespace category_theory.pretriangulated
open category_theory.category

/-
We work in a category `C` equipped with a shift.
-/
variables (C : Type u) [category.{v} C] [has_shift C ‚Ñ§]

/--
A triangle in `C` is a sextuple `(X,Y,Z,f,g,h)` where `X,Y,Z` are objects of `C`,
and `f : X ‚ü∂ Y`, `g : Y ‚ü∂ Z`, `h : Z ‚ü∂ X‚ü¶1‚üß` are morphisms in `C`.
See <https://stacks.math.columbia.edu/tag/0144>.
-/
structure triangle := mk' ::
(obj‚ÇÅ : C)
(obj‚ÇÇ : C)
(obj‚ÇÉ : C)
(mor‚ÇÅ : obj‚ÇÅ ‚ü∂ obj‚ÇÇ)
(mor‚ÇÇ : obj‚ÇÇ ‚ü∂ obj‚ÇÉ)
(mor‚ÇÉ : obj‚ÇÉ ‚ü∂ obj‚ÇÅ‚ü¶(1:‚Ñ§)‚üß)

variable {C}

/--
A triangle `(X,Y,Z,f,g,h)` in `C` is defined by the morphisms `f : X ‚ü∂ Y`, `g : Y ‚ü∂ Z`
and `h : Z ‚ü∂ X‚ü¶1‚üß`.
-/
@[simps]
def triangle.mk {X Y Z : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (h : Z ‚ü∂ X‚ü¶(1:‚Ñ§)‚üß) : triangle C :=
{ obj‚ÇÅ := X,
  obj‚ÇÇ := Y,
  obj‚ÇÉ := Z,
  mor‚ÇÅ := f,
  mor‚ÇÇ := g,
  mor‚ÇÉ := h }

section
variables [has_zero_object C] [has_zero_morphisms C]
open_locale zero_object

instance : inhabited (triangle C) :=
‚ü®‚ü®0,0,0,0,0,0‚ü©‚ü©

/--
For each object in `C`, there is a triangle of the form `(X,X,0,ùüô X,0,0)`
-/
@[simps]
def contractible_triangle (X : C) : triangle C := triangle.mk (ùüô X) (0 : X ‚ü∂ 0) 0

end

/--
A morphism of triangles `(X,Y,Z,f,g,h) ‚ü∂ (X',Y',Z',f',g',h')` in `C` is a triple of morphisms
`a : X ‚ü∂ X'`, `b : Y ‚ü∂ Y'`, `c : Z ‚ü∂ Z'` such that
`a ‚â´ f' = f ‚â´ b`, `b ‚â´ g' = g ‚â´ c`, and `a‚ü¶1‚üß' ‚â´ h = h' ‚â´ c`.
In other words, we have a commutative diagram:
```
     f      g      h
  X  ‚îÄ‚îÄ‚îÄ> Y  ‚îÄ‚îÄ‚îÄ> Z  ‚îÄ‚îÄ‚îÄ> X‚ü¶1‚üß
  ‚îÇ       ‚îÇ       ‚îÇ        ‚îÇ
  ‚îÇa      ‚îÇb      ‚îÇc       ‚îÇa‚ü¶1‚üß'
  V       V       V        V
  X' ‚îÄ‚îÄ‚îÄ> Y' ‚îÄ‚îÄ‚îÄ> Z' ‚îÄ‚îÄ‚îÄ> X'‚ü¶1‚üß
     f'     g'     h'
```
See <https://stacks.math.columbia.edu/tag/0144>.
-/
@[ext]
structure triangle_morphism (T‚ÇÅ : triangle C) (T‚ÇÇ : triangle C) :=
(hom‚ÇÅ : T‚ÇÅ.obj‚ÇÅ ‚ü∂ T‚ÇÇ.obj‚ÇÅ)
(hom‚ÇÇ : T‚ÇÅ.obj‚ÇÇ ‚ü∂ T‚ÇÇ.obj‚ÇÇ)
(hom‚ÇÉ : T‚ÇÅ.obj‚ÇÉ ‚ü∂ T‚ÇÇ.obj‚ÇÉ)
(comm‚ÇÅ' : T‚ÇÅ.mor‚ÇÅ ‚â´ hom‚ÇÇ = hom‚ÇÅ ‚â´ T‚ÇÇ.mor‚ÇÅ . obviously)
(comm‚ÇÇ' : T‚ÇÅ.mor‚ÇÇ ‚â´ hom‚ÇÉ = hom‚ÇÇ ‚â´ T‚ÇÇ.mor‚ÇÇ . obviously)
(comm‚ÇÉ' : T‚ÇÅ.mor‚ÇÉ ‚â´ hom‚ÇÅ‚ü¶1‚üß' = hom‚ÇÉ ‚â´ T‚ÇÇ.mor‚ÇÉ . obviously)

restate_axiom triangle_morphism.comm‚ÇÅ'
restate_axiom triangle_morphism.comm‚ÇÇ'
restate_axiom triangle_morphism.comm‚ÇÉ'
attribute [simp, reassoc] triangle_morphism.comm‚ÇÅ triangle_morphism.comm‚ÇÇ triangle_morphism.comm‚ÇÉ

/--
The identity triangle morphism.
-/
@[simps]
def triangle_morphism_id (T : triangle C) : triangle_morphism T T :=
{ hom‚ÇÅ := ùüô T.obj‚ÇÅ,
  hom‚ÇÇ := ùüô T.obj‚ÇÇ,
  hom‚ÇÉ := ùüô T.obj‚ÇÉ }

instance (T : triangle C) : inhabited (triangle_morphism T T) := ‚ü®triangle_morphism_id T‚ü©

variables {T‚ÇÅ T‚ÇÇ T‚ÇÉ : triangle C}

/--
Composition of triangle morphisms gives a triangle morphism.
-/
@[simps]
def triangle_morphism.comp (f : triangle_morphism T‚ÇÅ T‚ÇÇ) (g : triangle_morphism T‚ÇÇ T‚ÇÉ) :
  triangle_morphism T‚ÇÅ T‚ÇÉ :=
{ hom‚ÇÅ := f.hom‚ÇÅ ‚â´ g.hom‚ÇÅ,
  hom‚ÇÇ := f.hom‚ÇÇ ‚â´ g.hom‚ÇÇ,
  hom‚ÇÉ := f.hom‚ÇÉ ‚â´ g.hom‚ÇÉ }

/--
Triangles with triangle morphisms form a category.
-/
@[simps]
instance triangle_category : category (triangle C) :=
{ hom   := Œª A B, triangle_morphism A B,
  id    := Œª A, triangle_morphism_id A,
  comp  := Œª A B C f g, f.comp g }

/-- a constructor for morphisms of triangles -/
@[simps]
def triangle.hom_mk (A B : triangle C)
  (hom‚ÇÅ : A.obj‚ÇÅ ‚ü∂ B.obj‚ÇÅ) (hom‚ÇÇ : A.obj‚ÇÇ ‚ü∂ B.obj‚ÇÇ) (hom‚ÇÉ : A.obj‚ÇÉ ‚ü∂ B.obj‚ÇÉ)
  (comm‚ÇÅ : A.mor‚ÇÅ ‚â´ hom‚ÇÇ = hom‚ÇÅ ‚â´ B.mor‚ÇÅ) (comm‚ÇÇ : A.mor‚ÇÇ ‚â´ hom‚ÇÉ = hom‚ÇÇ ‚â´ B.mor‚ÇÇ)
  (comm‚ÇÉ : A.mor‚ÇÉ ‚â´ hom‚ÇÅ‚ü¶1‚üß' = hom‚ÇÉ ‚â´ B.mor‚ÇÉ) : A ‚ü∂ B :=
{ hom‚ÇÅ := hom‚ÇÅ,
  hom‚ÇÇ := hom‚ÇÇ,
  hom‚ÇÉ := hom‚ÇÉ,
  comm‚ÇÅ' := comm‚ÇÅ,
  comm‚ÇÇ' := comm‚ÇÇ,
  comm‚ÇÉ' := comm‚ÇÉ, }

/-- a constructor for isomorphisms of triangles -/
@[simps]
def triangle.iso_mk (A B : triangle C)
  (iso‚ÇÅ : A.obj‚ÇÅ ‚âÖ B.obj‚ÇÅ) (iso‚ÇÇ : A.obj‚ÇÇ ‚âÖ B.obj‚ÇÇ) (iso‚ÇÉ : A.obj‚ÇÉ ‚âÖ B.obj‚ÇÉ)
  (comm‚ÇÅ : A.mor‚ÇÅ ‚â´ iso‚ÇÇ.hom = iso‚ÇÅ.hom ‚â´ B.mor‚ÇÅ)
  (comm‚ÇÇ : A.mor‚ÇÇ ‚â´ iso‚ÇÉ.hom = iso‚ÇÇ.hom ‚â´ B.mor‚ÇÇ)
  (comm‚ÇÉ : A.mor‚ÇÉ ‚â´ iso‚ÇÅ.hom‚ü¶1‚üß' = iso‚ÇÉ.hom ‚â´ B.mor‚ÇÉ) : A ‚âÖ B :=
{ hom := triangle.hom_mk _ _ iso‚ÇÅ.hom iso‚ÇÇ.hom iso‚ÇÉ.hom comm‚ÇÅ comm‚ÇÇ comm‚ÇÉ,
  inv := triangle.hom_mk _ _ iso‚ÇÅ.inv iso‚ÇÇ.inv iso‚ÇÉ.inv
    (by simp only [‚Üê cancel_mono iso‚ÇÇ.hom, assoc, iso.inv_hom_id, comp_id,
      comm‚ÇÅ, iso.inv_hom_id_assoc])
    (by simp only [‚Üê cancel_mono iso‚ÇÉ.hom, assoc, iso.inv_hom_id, comp_id,
      comm‚ÇÇ, iso.inv_hom_id_assoc])
    (by simp only [‚Üê cancel_mono (iso‚ÇÅ.hom‚ü¶(1 : ‚Ñ§)‚üß'), assoc, ‚Üê functor.map_comp,
      iso.inv_hom_id, category_theory.functor.map_id, comp_id, comm‚ÇÉ, iso.inv_hom_id_assoc]), }

end category_theory.pretriangulated
