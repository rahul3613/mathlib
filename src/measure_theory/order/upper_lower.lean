/-
Copyright (c) 2022 Ya√´l Dillies, Kexing Ying. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Ya√´l Dillies, Kexing Ying
-/
import analysis.normed.order.upper_lower
import logic.lemmas
import measure_theory.covering.besicovitch_vector_space

/-!
# Order-connected sets are null-measurable

This file proves that order-connected sets in `‚Ñù‚Åø` under the pointwise order are null-measurable.
Recall that `x ‚â§ y` iff `‚àÄ i, x i ‚â§ y i`, and `s` is order-connected iff
`‚àÄ x y ‚àà s, ‚àÄ z, x ‚â§ z ‚Üí z ‚â§ y ‚Üí z ‚àà s`.

## Main declarations

* `set.ord_connected.null_frontier`: The frontier of an order-connected set in `‚Ñù‚Åø` has measure `0`.

## Notes

We prove null-measurability in `‚Ñù‚Åø` with the `‚àû`-metric, but this transfers directly to `‚Ñù‚Åø` with
the Euclidean metric because they have the same measurable sets.

Null-measurability can't be strengthened to measurability because any antichain (and in particular
any subset of the antidiagonal `{(x, y) | x + y = 0}`) is order-connected.

## TODO

Generalize so that it also applies to `‚Ñù √ó ‚Ñù`, for example.
-/

open filter measure_theory metric set
open_locale topology

variables {Œπ : Type*} [fintype Œπ] {s : set (Œπ ‚Üí ‚Ñù)} {x y : Œπ ‚Üí ‚Ñù} {Œ¥ : ‚Ñù}

/-- If we can fit a small ball inside a set `s` intersected with any neighborhood of `x`, then the
density of `s` near `x` is not `0`. Along with `aux‚ÇÅ`, this proves that `x` is a Lebesgue point of
`s`. This will be used to prove that the frontier of an order-connected set is null. -/
private lemma aux‚ÇÄ
  (h : ‚àÄ Œ¥, 0 < Œ¥ ‚Üí ‚àÉ y, closed_ball y (Œ¥/4) ‚äÜ closed_ball x Œ¥ ‚àß closed_ball y (Œ¥/4) ‚äÜ interior s) :
  ¬¨ tendsto (Œª r, volume (closure s ‚à© closed_ball x r) / volume (closed_ball x r)) (ùìù[>] 0)
    (ùìù 0) :=
begin
  choose f hf‚ÇÄ hf‚ÇÅ using h,
  intros H,
  obtain ‚ü®Œµ, hŒµ, hŒµ', hŒµ‚ÇÄ‚ü© := exists_seq_strict_anti_tendsto_nhds_within (0 : ‚Ñù),
  refine not_eventually.2 (frequently_of_forall $ Œª _, lt_irrefl $
    ennreal.of_real $ 4‚Åª¬π ^ fintype.card Œπ)
   ((tendsto.eventually_lt (H.comp hŒµ‚ÇÄ) tendsto_const_nhds _).mono $ Œª n, lt_of_le_of_lt _),
  swap,
  refine (ennreal.div_le_div_right (volume.mono $ subset_inter
    ((hf‚ÇÅ _ $ hŒµ' n).trans interior_subset_closure) $ hf‚ÇÄ _ $ hŒµ' n) _).trans_eq' _,
  dsimp,
  have := hŒµ' n,
  rw [real.volume_pi_closed_ball, real.volume_pi_closed_ball, ‚Üêennreal.of_real_div_of_pos, ‚Üêdiv_pow,
    mul_div_mul_left _ _ (two_ne_zero' ‚Ñù), div_right_comm, div_self, one_div],
  all_goals { positivity },
end

/-- If we can fit a small ball inside a set `s·∂ú` intersected with any neighborhood of `x`, then the
density of `s` near `x` is not `1`. Along with `aux‚ÇÄ`, this proves that `x` is a Lebesgue point of
`s`. This will be used to prove that the frontier of an order-connected set is null. -/
private lemma aux‚ÇÅ
  (h : ‚àÄ Œ¥, 0 < Œ¥ ‚Üí
    ‚àÉ y, closed_ball y (Œ¥/4) ‚äÜ closed_ball x Œ¥ ‚àß closed_ball y (Œ¥/4) ‚äÜ interior s·∂ú) :
  ¬¨ tendsto (Œª r, volume (closure s ‚à© closed_ball x r) / volume (closed_ball x r)) (ùìù[>] 0)
    (ùìù 1) :=
begin
  choose f hf‚ÇÄ hf‚ÇÅ using h,
  intros H,
  obtain ‚ü®Œµ, hŒµ, hŒµ', hŒµ‚ÇÄ‚ü© := exists_seq_strict_anti_tendsto_nhds_within (0 : ‚Ñù),
  refine not_eventually.2 (frequently_of_forall $ Œª _, lt_irrefl $
    1 - ennreal.of_real (4‚Åª¬π ^ fintype.card Œπ))
    ((tendsto.eventually_lt tendsto_const_nhds (H.comp hŒµ‚ÇÄ) $
    ennreal.sub_lt_self ennreal.one_ne_top one_ne_zero _).mono $ Œª n, lt_of_le_of_lt' _),
  swap,
  refine (ennreal.div_le_div_right (volume.mono _) _).trans_eq _,
  { exact closed_ball x (Œµ n) \ closed_ball (f (Œµ n) $ hŒµ' n) (Œµ n / 4) },
  { rw diff_eq_compl_inter,
    refine inter_subset_inter_left _ _,
    rw [subset_compl_comm, ‚Üêinterior_compl],
    exact hf‚ÇÅ _ _ },
  dsimp,
  have := hŒµ' n,
  rw [measure_diff (hf‚ÇÄ _ _) _ ((real.volume_pi_closed_ball _ _).trans_ne ennreal.of_real_ne_top),
    real.volume_pi_closed_ball, real.volume_pi_closed_ball,  ennreal.sub_div (Œª _ _, _),
    ennreal.div_self _ ennreal.of_real_ne_top, ‚Üêennreal.of_real_div_of_pos, ‚Üêdiv_pow,
    mul_div_mul_left _ _ (two_ne_zero' ‚Ñù), div_right_comm, div_self, one_div],
  all_goals { positivity <|> measurability },
end

lemma is_upper_set.null_frontier (hs : is_upper_set s) : volume (frontier s) = 0 :=
begin
  refine eq_bot_mono (volume.mono $ Œª x hx, _)
    (besicovitch.ae_tendsto_measure_inter_div_of_measurable_set _ is_closed_closure.measurable_set),
  { exact s },
  by_cases x ‚àà closure s; simp [h],
  { exact aux‚ÇÅ (Œª _, hs.compl.exists_subset_ball $ frontier_subset_closure $
      by rwa frontier_compl) },
  { exact aux‚ÇÄ (Œª _, hs.exists_subset_ball $ frontier_subset_closure hx) }
end

lemma is_lower_set.null_frontier (hs : is_lower_set s) : volume (frontier s) = 0 :=
begin
  refine eq_bot_mono (volume.mono $ Œª x hx, _)
    (besicovitch.ae_tendsto_measure_inter_div_of_measurable_set _ is_closed_closure.measurable_set),
  { exact s },
  by_cases x ‚àà closure s; simp [h],
  { exact aux‚ÇÅ (Œª _, hs.compl.exists_subset_ball $ frontier_subset_closure $
      by rwa frontier_compl) },
  { exact aux‚ÇÄ (Œª _, hs.exists_subset_ball $ frontier_subset_closure hx) }
end

lemma set.ord_connected.null_frontier (hs : s.ord_connected) : volume (frontier s) = 0 :=
begin
  rw ‚Üê hs.upper_closure_inter_lower_closure,
  refine le_bot_iff.1 ((volume.mono $ (frontier_inter_subset _ _).trans $ union_subset_union
    (inter_subset_left _ _) $ inter_subset_right _ _).trans $ (measure_union_le _ _).trans_eq _),
  rw [(upper_set.upper _).null_frontier, (lower_set.lower _).null_frontier, zero_add, bot_eq_zero],
end

protected lemma set.ord_connected.null_measurable_set (hs : s.ord_connected) :
  null_measurable_set s :=
null_measurable_set_of_null_frontier hs.null_frontier

lemma is_antichain.volume_eq_zero [nonempty Œπ] (hs : is_antichain (‚â§) s) : volume s = 0 :=
le_bot_iff.1 $ (volume.mono $ by { rw [‚Üêclosure_diff_interior, hs.interior_eq_empty, diff_empty],
  exact subset_closure }).trans_eq hs.ord_connected.null_frontier
