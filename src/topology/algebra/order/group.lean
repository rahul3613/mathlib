/-
Copyright (c) 2020 Yury Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury Kudryashov
-/
import topology.order.basic
import topology.algebra.group.basic

/-!
# Topology on a linear ordered additive commutative group

> THIS FILE IS SYNCHRONIZED WITH MATHLIB4.
> Any changes to this file require a corresponding PR to mathlib4.

In this file we prove that a linear ordered additive commutative group with order topology is a
topological group. We also prove continuity of `abs : G ‚Üí G` and provide convenience lemmas like
`continuous_at.abs`.
-/

open set filter
open_locale topology filter

variables {Œ± G : Type*} [topological_space G] [linear_ordered_add_comm_group G] [order_topology G]
variables {l : filter Œ±} {f g : Œ± ‚Üí G}

@[priority 100] -- see Note [lower instance priority]
instance linear_ordered_add_comm_group.topological_add_group : topological_add_group G :=
{ continuous_add :=
    begin
      refine continuous_iff_continuous_at.2 _,
      rintro ‚ü®a, b‚ü©,
      refine linear_ordered_add_comm_group.tendsto_nhds.2 (Œª Œµ Œµ0, _),
      rcases dense_or_discrete 0 Œµ with (‚ü®Œ¥, Œ¥0, Œ¥Œµ‚ü©|‚ü®h‚ÇÅ, h‚ÇÇ‚ü©),
      { -- If there exists `Œ¥ ‚àà (0, Œµ)`, then we choose `Œ¥`-nhd of `a` and `(Œµ-Œ¥)`-nhd of `b`
        filter_upwards [(eventually_abs_sub_lt a Œ¥0).prod_nhds
          (eventually_abs_sub_lt b (sub_pos.2 Œ¥Œµ))],
        rintros ‚ü®x, y‚ü© ‚ü®hx : |x - a| < Œ¥, hy : |y - b| < Œµ - Œ¥‚ü©,
        rw [add_sub_add_comm],
        calc |x - a + (y - b)| ‚â§ |x - a| + |y - b| : abs_add _ _
        ... < Œ¥ + (Œµ - Œ¥) : add_lt_add hx hy
        ... = Œµ : add_sub_cancel'_right _ _ },
      { -- Otherwise `Œµ`-nhd of each point `a` is `{a}`
        have hŒµ : ‚àÄ {x y}, |x - y| < Œµ ‚Üí x = y,
        { intros x y h,
          simpa [sub_eq_zero] using h‚ÇÇ _ h },
        filter_upwards [(eventually_abs_sub_lt a Œµ0).prod_nhds (eventually_abs_sub_lt b Œµ0)],
        rintros ‚ü®x, y‚ü© ‚ü®hx : |x - a| < Œµ, hy : |y - b| < Œµ‚ü©,
        simpa [hŒµ hx, hŒµ hy] }
    end,
  continuous_neg := continuous_iff_continuous_at.2 $ Œª a,
    linear_ordered_add_comm_group.tendsto_nhds.2 $ Œª Œµ Œµ0,
      (eventually_abs_sub_lt a Œµ0).mono $ Œª x hx, by rwa [neg_sub_neg, abs_sub_comm] }

@[continuity]
lemma continuous_abs : continuous (abs : G ‚Üí G) := continuous_id.max continuous_neg

protected lemma filter.tendsto.abs {a : G} (h : tendsto f l (ùìù a)) :
  tendsto (Œª x, |f x|) l (ùìù (|a|)) :=
(continuous_abs.tendsto _).comp h

lemma tendsto_zero_iff_abs_tendsto_zero (f : Œ± ‚Üí G) :
  tendsto f l (ùìù 0) ‚Üî tendsto (abs ‚àò f) l (ùìù 0) :=
begin
  refine ‚ü®Œª h, (abs_zero : |(0 : G)| = 0) ‚ñ∏ h.abs, Œª h, _‚ü©,
  have : tendsto (Œª a, -|f a|) l (ùìù 0) := (neg_zero : -(0 : G) = 0) ‚ñ∏ h.neg,
  exact tendsto_of_tendsto_of_tendsto_of_le_of_le this h
    (Œª x, neg_abs_le_self $ f x) (Œª x, le_abs_self $ f x),
end

variables [topological_space Œ±] {a : Œ±} {s : set Œ±}

protected lemma continuous.abs (h : continuous f) : continuous (Œª x, |f x|) := continuous_abs.comp h

protected lemma continuous_at.abs (h : continuous_at f a) : continuous_at (Œª x, |f x|) a := h.abs

protected lemma continuous_within_at.abs (h : continuous_within_at f s a) :
  continuous_within_at (Œª x, |f x|) s a := h.abs

protected lemma continuous_on.abs (h : continuous_on f s) : continuous_on (Œª x, |f x|) s :=
Œª x hx, (h x hx).abs

lemma tendsto_abs_nhds_within_zero : tendsto (abs : G ‚Üí G) (ùìù[‚â†] 0) (ùìù[>] 0) :=
(continuous_abs.tendsto' (0 : G) 0 abs_zero).inf $ tendsto_principal_principal.2 $ Œª x, abs_pos.2
