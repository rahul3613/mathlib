/-
Copyright (c) 2022 Felix Weilacher. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Felix Weilacher
-/
import topology.metric_space.polish
import topology.metric_space.cantor_scheme

/-!
# Perfect Sets

> THIS FILE IS SYNCHRONIZED WITH MATHLIB4.
> Any changes to this file require a corresponding PR to mathlib4.

In this file we define perfect subsets of a topological space, and prove some basic properties,
including a version of the Cantor-Bendixson Theorem.

## Main Definitions

* `perfect C`: A set `C` is perfect, meaning it is closed and every point of it
  is an accumulation point of itself.

## Main Statements

* `perfect.splitting`: A perfect nonempty set contains two disjoint perfect nonempty subsets.
  The main inductive step in the construction of an embedding from the Cantor space to a
  perfect nonempty complete metric space.
* `exists_countable_union_perfect_of_is_closed`: One version of the **Cantor-Bendixson Theorem**:
  A closed set in a second countable space can be written as the union of a countable set and a
  perfect set.
* `perfect.exists_nat_bool_injection`: A perfect nonempty set in a complete metric space
  admits an embedding from the Cantor space.

## Implementation Notes

We do not require perfect sets to be nonempty.

We define a nonstandard predicate, `preperfect`, which drops the closed-ness requirement
from the definition of perfect. In T1 spaces, this is equivalent to having a perfect closure,
see `preperfect_iff_perfect_closure`.

## References

* [kechris1995] (Chapters 6-7)

## Tags

accumulation point, perfect set, cantor-bendixson.

-/

open_locale topology filter
open topological_space filter set

section basic

variables {Œ± : Type*} [topological_space Œ±] {C : set Œ±}

/-- If `x` is an accumulation point of a set `C` and `U` is a neighborhood of `x`,
then `x` is an accumulation point of `U ‚à© C`. -/
theorem acc_pt.nhds_inter {x : Œ±} {U : set Œ±} (h_acc : acc_pt x (ùìü C)) (hU : U ‚àà ùìù x) :
  acc_pt x (ùìü (U ‚à© C)) :=
begin
  have : ùìù[‚â†] x ‚â§ ùìü U,
  { rw le_principal_iff,
    exact mem_nhds_within_of_mem_nhds hU, },
  rw [acc_pt, ‚Üê inf_principal, ‚Üê inf_assoc, inf_of_le_left this],
  exact h_acc,
end

/-- A set `C` is preperfect if all of its points are accumulation points of itself.
If `C` is nonempty and `Œ±` is a T1 space, this is equivalent to the closure of `C` being perfect.
See `preperfect_iff_perfect_closure`.-/
def preperfect (C : set Œ±) : Prop := ‚àÄ x ‚àà C, acc_pt x (ùìü C)

/-- A set `C` is called perfect if it is closed and all of its
points are accumulation points of itself.
Note that we do not require `C` to be nonempty.-/
structure perfect (C : set Œ±) : Prop :=
(closed : is_closed C)
(acc : preperfect C)

lemma preperfect_iff_nhds : preperfect C ‚Üî ‚àÄ x ‚àà C, ‚àÄ U ‚àà ùìù x, ‚àÉ y ‚àà U ‚à© C, y ‚â† x :=
by simp only [preperfect, acc_pt_iff_nhds]

/-- The intersection of a preperfect set and an open set is preperfect-/
theorem preperfect.open_inter {U : set Œ±} (hC : preperfect C) (hU : is_open U) :
  preperfect (U ‚à© C) :=
begin
  rintros x ‚ü®xU, xC‚ü©,
  apply (hC _ xC).nhds_inter,
  exact hU.mem_nhds xU,
end

/-- The closure of a preperfect set is perfect.
For a converse, see `preperfect_iff_perfect_closure`-/
theorem preperfect.perfect_closure (hC : preperfect C) : perfect (closure C) :=
begin
  split, { exact is_closed_closure },
  intros x hx,
  by_cases h : x ‚àà C; apply acc_pt.mono _ (principal_mono.mpr subset_closure),
  { exact hC _ h },
  have : {x}·∂ú ‚à© C = C := by simp [h],
  rw [acc_pt, nhds_within, inf_assoc, inf_principal, this],
  rw [closure_eq_cluster_pts] at hx,
  exact hx,
end

/-- In a T1 space, being preperfect is equivalent to having perfect closure.-/
theorem preperfect_iff_perfect_closure [t1_space Œ±] :
  preperfect C ‚Üî perfect (closure C) :=
begin
  split; intro h, { exact h.perfect_closure },
  intros x xC,
  have H : acc_pt x (ùìü (closure C)) := h.acc _ (subset_closure xC),
  rw acc_pt_iff_frequently at *,
  have : ‚àÄ y , y ‚â† x ‚àß y ‚àà closure C ‚Üí ‚àÉ·∂† z in ùìù y, z ‚â† x ‚àß z ‚àà C,
  { rintros y ‚ü®hyx, yC‚ü©,
    simp only [‚Üê mem_compl_singleton_iff, @and_comm _ (_ ‚àà C) , ‚Üê frequently_nhds_within_iff,
      hyx.nhds_within_compl_singleton, ‚Üê mem_closure_iff_frequently],
    exact yC, },
  rw ‚Üê frequently_frequently_nhds,
  exact H.mono this,
end

theorem perfect.closure_nhds_inter {U : set Œ±} (hC : perfect C) (x : Œ±) (xC : x ‚àà C) (xU : x ‚àà U)
  (Uop : is_open U) : perfect (closure (U ‚à© C)) ‚àß (closure (U ‚à© C)).nonempty :=
begin
  split,
  { apply preperfect.perfect_closure,
    exact (hC.acc).open_inter Uop, },
  apply nonempty.closure,
  exact ‚ü®x, ‚ü®xU, xC‚ü©‚ü©,
end

/-- Given a perfect nonempty set in a T2.5 space, we can find two disjoint perfect subsets
This is the main inductive step in the proof of the Cantor-Bendixson Theorem-/
lemma perfect.splitting [t2_5_space Œ±] (hC : perfect C) (hnonempty : C.nonempty) :
  ‚àÉ C‚ÇÄ C‚ÇÅ : set Œ±, (perfect C‚ÇÄ ‚àß C‚ÇÄ.nonempty ‚àß C‚ÇÄ ‚äÜ C) ‚àß
  (perfect C‚ÇÅ ‚àß C‚ÇÅ.nonempty ‚àß C‚ÇÅ ‚äÜ C) ‚àß disjoint C‚ÇÄ C‚ÇÅ :=
begin
  cases hnonempty with y yC,
  obtain ‚ü®x, xC, hxy‚ü© : ‚àÉ x ‚àà C, x ‚â† y,
  { have := hC.acc _ yC,
    rw acc_pt_iff_nhds at this,
    rcases this univ (univ_mem) with ‚ü®x, xC, hxy‚ü©,
    exact ‚ü®x, xC.2, hxy‚ü©, },
  obtain ‚ü®U, xU, Uop, V, yV, Vop, hUV‚ü© := exists_open_nhds_disjoint_closure hxy,
  use [closure (U ‚à© C), closure (V ‚à© C)],
  split; rw ‚Üê and_assoc,
  { refine ‚ü®hC.closure_nhds_inter x xC xU Uop, _‚ü©,
    rw hC.closed.closure_subset_iff,
    exact inter_subset_right _ _, },
  split,
  { refine ‚ü®hC.closure_nhds_inter y yC yV Vop, _‚ü©,
    rw hC.closed.closure_subset_iff,
    exact inter_subset_right _ _, },
  apply disjoint.mono _ _ hUV; apply closure_mono; exact inter_subset_left _ _,
end

section kernel

/-- The **Cantor-Bendixson Theorem**: Any closed subset of a second countable space
can be written as the union of a countable set and a perfect set.-/
theorem exists_countable_union_perfect_of_is_closed [second_countable_topology Œ±]
  (hclosed : is_closed C) :
  ‚àÉ V D : set Œ±, (V.countable) ‚àß (perfect D) ‚àß (C = V ‚à™ D) :=
begin
  obtain ‚ü®b, bct, bnontrivial, bbasis‚ü© := topological_space.exists_countable_basis Œ±,
  let v := {U ‚àà b | (U ‚à© C).countable},
  let V := ‚ãÉ U ‚àà v, U,
  let D := C \ V,
  have Vct : (V ‚à© C).countable,
  { simp only [Union_inter, mem_sep_iff],
    apply countable.bUnion,
    { exact countable.mono (inter_subset_left _ _) bct, },
    { exact inter_subset_right _ _, }, },
  refine ‚ü®V ‚à© C, D, Vct, ‚ü®_, _‚ü©, _‚ü©,
  { refine hclosed.sdiff (is_open_bUnion (Œª U, _)),
    exact Œª ‚ü®Ub, _‚ü©, is_topological_basis.is_open bbasis Ub, },
  { rw preperfect_iff_nhds,
    intros x xD E xE,
    have : ¬¨ (E ‚à© D).countable,
    { intro h,
      obtain ‚ü®U, hUb, xU, hU‚ü© : ‚àÉ U ‚àà b, x ‚àà U ‚àß U ‚äÜ E,
      { exact (is_topological_basis.mem_nhds_iff bbasis).mp xE, },
      have hU_cnt : (U ‚à© C).countable,
      { apply @countable.mono _ _ ((E ‚à© D) ‚à™ (V ‚à© C)),
        { rintros y ‚ü®yU, yC‚ü©,
          by_cases y ‚àà V,
          { exact mem_union_right _ (mem_inter h yC), },
          { exact mem_union_left _ (mem_inter (hU yU) ‚ü®yC, h‚ü©), }, },
        exact countable.union h Vct, },
      have : U ‚àà v := ‚ü®hUb, hU_cnt‚ü©,
      apply xD.2,
      exact mem_bUnion this xU, },
    by_contradiction h,
    push_neg at h,
    exact absurd (countable.mono h (set.countable_singleton _)) this, },
  { rw [inter_comm, inter_union_diff], },
end

/-- Any uncountable closed set in a second countable space contains a nonempty perfect subset.-/
theorem exists_perfect_nonempty_of_is_closed_of_not_countable [second_countable_topology Œ±]
  (hclosed : is_closed C) (hunc : ¬¨ C.countable) :
  ‚àÉ D : set Œ±, perfect D ‚àß D.nonempty ‚àß D ‚äÜ C :=
begin
  rcases exists_countable_union_perfect_of_is_closed hclosed with ‚ü®V, D, Vct, Dperf, VD‚ü©,
  refine ‚ü®D, ‚ü®Dperf, _‚ü©‚ü©,
  split,
  { rw nonempty_iff_ne_empty,
    by_contradiction,
    rw [h, union_empty] at VD,
    rw VD at hunc,
    contradiction, },
  rw VD,
  exact subset_union_right _ _,
end

end kernel
end basic

section cantor_inj_metric

open function
open_locale ennreal
variables {Œ± : Type*} [metric_space Œ±] {C : set Œ±} (hC : perfect C) {Œµ : ‚Ñù‚â•0‚àû}
include hC

private lemma perfect.small_diam_aux (Œµ_pos : 0 < Œµ) {x : Œ±} (xC : x ‚àà C) :
  let D := closure (emetric.ball x (Œµ / 2) ‚à© C) in
  perfect D ‚àß D.nonempty ‚àß D ‚äÜ C ‚àß emetric.diam D ‚â§ Œµ :=
begin
  have : x ‚àà (emetric.ball x (Œµ / 2)),
  { apply emetric.mem_ball_self,
    rw ennreal.div_pos_iff,
    exact ‚ü®ne_of_gt Œµ_pos, by norm_num‚ü©, },
  have := hC.closure_nhds_inter x xC this emetric.is_open_ball,
  refine ‚ü®this.1, this.2, _, _‚ü©,
  { rw is_closed.closure_subset_iff hC.closed,
    apply inter_subset_right, },
  rw emetric.diam_closure,
  apply le_trans (emetric.diam_mono (inter_subset_left _ _)),
  convert emetric.diam_ball,
  rw [mul_comm, ennreal.div_mul_cancel]; norm_num,
end

variable (hnonempty : C.nonempty)
include hnonempty

/-- A refinement of `perfect.splitting` for metric spaces, where we also control
the diameter of the new perfect sets. -/
lemma perfect.small_diam_splitting (Œµ_pos : 0 < Œµ) : ‚àÉ C‚ÇÄ C‚ÇÅ : set Œ±,
  (perfect C‚ÇÄ ‚àß C‚ÇÄ.nonempty ‚àß C‚ÇÄ ‚äÜ C ‚àß emetric.diam C‚ÇÄ ‚â§ Œµ) ‚àß
  (perfect C‚ÇÅ ‚àß C‚ÇÅ.nonempty ‚àß C‚ÇÅ ‚äÜ C ‚àß emetric.diam C‚ÇÅ ‚â§ Œµ) ‚àß disjoint C‚ÇÄ C‚ÇÅ :=
begin
  rcases hC.splitting hnonempty with ‚ü®D‚ÇÄ, D‚ÇÅ, ‚ü®perf0, non0, sub0‚ü©, ‚ü®perf1, non1, sub1‚ü©, hdisj‚ü©,
  cases non0 with x‚ÇÄ hx‚ÇÄ,
  cases non1 with x‚ÇÅ hx‚ÇÅ,
  rcases perf0.small_diam_aux Œµ_pos hx‚ÇÄ with ‚ü®perf0', non0', sub0', diam0‚ü©,
  rcases perf1.small_diam_aux Œµ_pos hx‚ÇÅ with ‚ü®perf1', non1', sub1', diam1‚ü©,
  refine ‚ü®closure (emetric.ball x‚ÇÄ (Œµ / 2) ‚à© D‚ÇÄ), closure (emetric.ball x‚ÇÅ (Œµ / 2) ‚à© D‚ÇÅ),
    ‚ü®perf0', non0', sub0'.trans sub0, diam0‚ü©, ‚ü®perf1', non1', sub1'.trans sub1, diam1‚ü©, _‚ü©,
  apply disjoint.mono _ _ hdisj; assumption,
end

open cantor_scheme

/-- Any nonempty perfect set in a complete metric space admits a continuous injection
from the cantor space, `‚Ñï ‚Üí bool`. -/
theorem perfect.exists_nat_bool_injection [complete_space Œ±] :
  ‚àÉ f : (‚Ñï ‚Üí bool) ‚Üí Œ±, (range f) ‚äÜ C ‚àß continuous f ‚àß injective f :=
begin
  obtain ‚ü®u, -, upos', hu‚ü© := exists_seq_strict_anti_tendsto' (zero_lt_one' ‚Ñù‚â•0‚àû),
  have upos := Œª n, (upos' n).1,
  let P := subtype (Œª E : set Œ±, perfect E ‚àß E.nonempty),
  choose C0 C1 h0 h1 hdisj using Œª {C : set Œ±} (hC : perfect C) (hnonempty : C.nonempty)
    {Œµ : ‚Ñù‚â•0‚àû} (hŒµ : 0 < Œµ), hC.small_diam_splitting hnonempty hŒµ,
  let DP : list bool ‚Üí P := Œª l,
  begin
    induction l with a l ih, { exact ‚ü®C, ‚ü®hC, hnonempty‚ü©‚ü© },
    cases a,
    { use C0 ih.property.1 ih.property.2 (upos l.length.succ),
      exact ‚ü®(h0 _ _ _).1, (h0 _ _ _).2.1‚ü©, },
    use C1 ih.property.1 ih.property.2 (upos l.length.succ),
    exact ‚ü®(h1 _ _ _).1, (h1 _ _ _).2.1‚ü©,
  end,
  let D : list bool ‚Üí set Œ± := Œª l, (DP l).val,
  have hanti : closure_antitone D,
  { refine antitone.closure_antitone _ (Œª l, (DP l).property.1.closed),
    intros l a,
    cases a,
    { exact (h0 _ _ _).2.2.1, },
    exact (h1 _ _ _).2.2.1, },
  have hdiam : vanishing_diam D,
  { intro x,
    apply tendsto_of_tendsto_of_tendsto_of_le_of_le' tendsto_const_nhds hu,
    { simp },
    rw eventually_at_top,
    refine ‚ü®1, Œª m (hm : 1 ‚â§ m), _‚ü©,
    rw nat.one_le_iff_ne_zero at hm,
    rcases nat.exists_eq_succ_of_ne_zero hm with ‚ü®n, rfl‚ü©,
    dsimp,
    cases (x n),
    { convert (h0 _ _ _).2.2.2,
      rw pi_nat.res_length },
    convert (h1 _ _ _).2.2.2,
    rw pi_nat.res_length, },
  have hdisj' : cantor_scheme.disjoint D,
  { rintros l (a | a) (b | b) hab; try { contradiction },
    { exact hdisj _ _ _, },
    exact (hdisj _ _ _).symm, },
  have hdom : ‚àÄ {x : ‚Ñï ‚Üí bool}, x ‚àà (induced_map D).1 := Œª x,
    by simp [hanti.map_of_vanishing_diam hdiam (Œª l, (DP l).property.2)],
  refine ‚ü®Œª x, (induced_map D).2 ‚ü®x, hdom‚ü©, _, _, _‚ü©,
  { rintros y ‚ü®x, rfl‚ü©,
    exact map_mem ‚ü®_, hdom‚ü© 0, },
  { continuity,
    exact hdiam.map_continuous, },
  intros x y hxy,
  simpa only [‚Üê subtype.val_inj] using hdisj'.map_injective hxy,
end

end cantor_inj_metric

/-- Any closed uncountable subset of a Polish space admits a continuous injection
from the Cantor space `‚Ñï ‚Üí bool`.-/
theorem is_closed.exists_nat_bool_injection_of_not_countable {Œ± : Type*}
  [topological_space Œ±] [polish_space Œ±] {C : set Œ±} (hC : is_closed C) (hunc : ¬¨ C.countable) :
  ‚àÉ f : (‚Ñï ‚Üí bool) ‚Üí Œ±, (range f) ‚äÜ C ‚àß continuous f ‚àß function.injective f :=
begin
  letI := upgrade_polish_space Œ±,
  obtain ‚ü®D, hD, Dnonempty, hDC‚ü© := exists_perfect_nonempty_of_is_closed_of_not_countable hC hunc,
  obtain ‚ü®f, hfD, hf‚ü© := hD.exists_nat_bool_injection Dnonempty,
  exact ‚ü®f, hfD.trans hDC, hf‚ü©,
end
