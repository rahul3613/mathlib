/-
Copyright (c) 2022 Yury Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury Kudryashov
-/
import topology.continuous_on
import order.filter.small_sets

/-!
### Locally finite families of sets

> THIS FILE IS SYNCHRONIZED WITH MATHLIB4.
> Any changes to this file require a corresponding PR to mathlib4.

We say that a family of sets in a topological space is *locally finite* if at every point `x : X`,
there is a neighborhood of `x` which meets only finitely many sets in the family.

In this file we give the definition and prove basic properties of locally finite families of sets.
-/

/- locally finite family [General Topology (Bourbaki, 1995)] -/

open set function filter
open_locale topology filter

universe u
variables {Œπ : Type u} {Œπ' Œ± X Y : Type*} [topological_space X] [topological_space Y]
  {f g : Œπ ‚Üí set X}

/-- A family of sets in `set X` is locally finite if at every point `x : X`,
there is a neighborhood of `x` which meets only finitely many sets in the family. -/
def locally_finite (f : Œπ ‚Üí set X) :=
‚àÄ x : X, ‚àÉt ‚àà ùìù x, {i | (f i ‚à© t).nonempty}.finite

lemma locally_finite_of_finite [finite Œπ] (f : Œπ ‚Üí set X) : locally_finite f :=
assume x, ‚ü®univ, univ_mem, to_finite _‚ü©

namespace locally_finite

lemma point_finite (hf : locally_finite f) (x : X) : {b | x ‚àà f b}.finite :=
let ‚ü®t, hxt, ht‚ü© := hf x in ht.subset $ Œª b hb, ‚ü®x, hb, mem_of_mem_nhds hxt‚ü©

protected lemma subset (hf : locally_finite f) (hg : ‚àÄ i, g i ‚äÜ f i) : locally_finite g :=
assume a,
let ‚ü®t, ht‚ÇÅ, ht‚ÇÇ‚ü© := hf a in
‚ü®t, ht‚ÇÅ, ht‚ÇÇ.subset $ assume i hi, hi.mono $ inter_subset_inter (hg i) subset.rfl‚ü©

lemma comp_inj_on {g : Œπ' ‚Üí Œπ} (hf : locally_finite f)
  (hg : inj_on g {i | (f (g i)).nonempty}) : locally_finite (f ‚àò g) :=
Œª x, let ‚ü®t, htx, htf‚ü© := hf x in ‚ü®t, htx, htf.preimage $ hg.mono $ Œª i hi,
  hi.out.mono $ inter_subset_left _ _‚ü©

lemma comp_injective {g : Œπ' ‚Üí Œπ} (hf : locally_finite f) (hg : injective g) :
  locally_finite (f ‚àò g) :=
hf.comp_inj_on (hg.inj_on _)

lemma _root_.locally_finite_iff_small_sets :
  locally_finite f ‚Üî ‚àÄ x, ‚àÄ·∂† s in (ùìù x).small_sets, {i | (f i ‚à© s).nonempty}.finite :=
forall_congr $ Œª x, iff.symm $ eventually_small_sets' $ Œª s t hst ht, ht.subset $
  Œª i hi, hi.mono $ inter_subset_inter_right _ hst

protected lemma eventually_small_sets (hf : locally_finite f) (x : X) :
  ‚àÄ·∂† s in (ùìù x).small_sets, {i | (f i ‚à© s).nonempty}.finite :=
locally_finite_iff_small_sets.mp hf x

lemma exists_mem_basis {Œπ' : Sort*} (hf : locally_finite f) {p : Œπ' ‚Üí Prop}
  {s : Œπ' ‚Üí set X} {x : X} (hb : (ùìù x).has_basis p s) :
  ‚àÉ i (hi : p i), {j | (f j ‚à© s i).nonempty}.finite :=
let ‚ü®i, hpi, hi‚ü© := hb.small_sets.eventually_iff.mp (hf.eventually_small_sets x)
in ‚ü®i, hpi, hi subset.rfl‚ü©

protected theorem nhds_within_Union (hf : locally_finite f) (a : X) :
  ùìù[‚ãÉ i, f i] a = ‚®Ü i, ùìù[f i] a :=
begin
  rcases hf a with ‚ü®U, haU, hfin‚ü©,
  refine le_antisymm _ (supr_le $ Œª i, nhds_within_mono _ (subset_Union _ _)),
  calc ùìù[‚ãÉ i, f i] a = ùìù[‚ãÉ i, f i ‚à© U] a :
    by rw [‚Üê Union_inter, ‚Üê nhds_within_inter_of_mem' (nhds_within_le_nhds haU)]
  ... = ùìù[‚ãÉ i ‚àà {j | (f j ‚à© U).nonempty}, (f i ‚à© U)] a :
    by simp only [mem_set_of_eq, Union_nonempty_self]
  ... = ‚®Ü i ‚àà {j | (f j ‚à© U).nonempty}, ùìù[f i ‚à© U] a :
    nhds_within_bUnion hfin _ _
  ... ‚â§ ‚®Ü i, ùìù[f i ‚à© U] a : supr‚ÇÇ_le_supr _ _
  ... ‚â§ ‚®Ü i, ùìù[f i] a : supr_mono (Œª i, nhds_within_mono _ $ inter_subset_left _ _)
end

lemma continuous_on_Union' {g : X ‚Üí Y} (hf : locally_finite f)
  (hc : ‚àÄ i x, x ‚àà closure (f i) ‚Üí continuous_within_at g (f i) x) :
  continuous_on g (‚ãÉ i, f i) :=
begin
  rintro x -,
  rw [continuous_within_at, hf.nhds_within_Union, tendsto_supr],
  intro i,
  by_cases hx : x ‚àà closure (f i),
  { exact hc i _ hx },
  { rw [mem_closure_iff_nhds_within_ne_bot, not_ne_bot] at hx,
    rw [hx],
    exact tendsto_bot }
end

lemma continuous_on_Union {g : X ‚Üí Y} (hf : locally_finite f) (h_cl : ‚àÄ i, is_closed (f i))
  (h_cont : ‚àÄ i, continuous_on g (f i)) :
  continuous_on g (‚ãÉ i, f i) :=
hf.continuous_on_Union' $ Œª i x hx, h_cont i x $ (h_cl i).closure_subset hx

protected lemma continuous' {g : X ‚Üí Y} (hf : locally_finite f) (h_cov : (‚ãÉ i, f i) = univ)
  (hc : ‚àÄ i x, x ‚àà closure (f i) ‚Üí continuous_within_at g (f i) x) :
  continuous g :=
continuous_iff_continuous_on_univ.2 $ h_cov ‚ñ∏ hf.continuous_on_Union' hc

protected lemma continuous {g : X ‚Üí Y} (hf : locally_finite f) (h_cov : (‚ãÉ i, f i) = univ)
  (h_cl : ‚àÄ i, is_closed (f i)) (h_cont : ‚àÄ i, continuous_on g (f i)) :
  continuous g :=
continuous_iff_continuous_on_univ.2 $ h_cov ‚ñ∏ hf.continuous_on_Union h_cl h_cont

protected lemma closure (hf : locally_finite f) : locally_finite (Œª i, closure (f i)) :=
begin
  intro x,
  rcases hf x with ‚ü®s, hsx, hsf‚ü©,
  refine ‚ü®interior s, interior_mem_nhds.2 hsx, hsf.subset $ Œª i hi, _‚ü©,
  exact (hi.mono is_open_interior.closure_inter).of_closure.mono
    (inter_subset_inter_right _ interior_subset)
end

lemma closure_Union (h : locally_finite f) : closure (‚ãÉ i, f i) = ‚ãÉ i, closure (f i) :=
begin
  ext x,
  simp only [mem_closure_iff_nhds_within_ne_bot, h.nhds_within_Union, supr_ne_bot, mem_Union]
end

lemma is_closed_Union (hf : locally_finite f) (hc : ‚àÄ i, is_closed (f i)) :
  is_closed (‚ãÉ i, f i) :=
by simp only [‚Üê closure_eq_iff_is_closed, hf.closure_Union, (hc _).closure_eq]

/-- If `f : Œ≤ ‚Üí set Œ±` is a locally finite family of closed sets, then for any `x : Œ±`, the
intersection of the complements to `f i`, `x ‚àâ f i`, is a neighbourhood of `x`. -/
lemma Inter_compl_mem_nhds (hf : locally_finite f) (hc : ‚àÄ i, is_closed (f i)) (x : X) :
  (‚ãÇ i (hi : x ‚àâ f i), (f i)·∂ú) ‚àà ùìù x :=
begin
  refine is_open.mem_nhds _ (mem_Inter‚ÇÇ.2 $ Œª i, id),
  suffices : is_closed (‚ãÉ i : {i // x ‚àâ f i}, f i),
    by rwa [‚Üê is_open_compl_iff, compl_Union, Inter_subtype] at this,
  exact (hf.comp_injective subtype.coe_injective).is_closed_Union (Œª i, hc _)
end

/-- Let `f : ‚Ñï ‚Üí Œ† a, Œ≤ a` be a sequence of (dependent) functions on a topological space. Suppose
that the family of sets `s n = {x | f (n + 1) x ‚â† f n x}` is locally finite. Then there exists a
function `F : Œ† a, Œ≤ a` such that for any `x`, we have `f n x = F x` on the product of an infinite
interval `[N, +‚àû)` and a neighbourhood of `x`.

We formulate the conclusion in terms of the product of filter `filter.at_top` and `ùìù x`. -/
lemma exists_forall_eventually_eq_prod {œÄ : X ‚Üí Sort*} {f : ‚Ñï ‚Üí Œ† x : X, œÄ x}
  (hf : locally_finite (Œª n, {x | f (n + 1) x ‚â† f n x})) :
  ‚àÉ F : Œ† x : X, œÄ x, ‚àÄ x, ‚àÄ·∂† p : ‚Ñï √ó X in at_top √ó·∂† ùìù x, f p.1 p.2 = F p.2 :=
begin
  choose U hUx hU using hf,
  choose N hN using Œª x, (hU x).bdd_above,
  replace hN : ‚àÄ x (n > N x) (y ‚àà U x), f (n + 1) y = f n y,
    from Œª x n hn y hy, by_contra (Œª hne, hn.lt.not_le $ hN x ‚ü®y, hne, hy‚ü©),
  replace hN : ‚àÄ x (n ‚â• N x + 1) (y ‚àà U x), f n y = f (N x + 1) y,
    from Œª x n hn y hy, nat.le_induction rfl (Œª k hle, (hN x _ hle _ hy).trans) n hn,
  refine ‚ü®Œª x, f (N x + 1) x, Œª x, _‚ü©,
  filter_upwards [filter.prod_mem_prod (eventually_gt_at_top (N x)) (hUx x)],
  rintro ‚ü®n, y‚ü© ‚ü®hn : N x < n, hy : y ‚àà U x‚ü©,
  calc f n y = f (N x + 1) y : hN _ _ hn _ hy
  ... = f (max (N x + 1) (N y + 1)) y : (hN _ _ (le_max_left _ _) _ hy).symm
  ... = f (N y + 1) y : hN _ _ (le_max_right _ _) _ (mem_of_mem_nhds $ hUx y)
end

/-- Let `f : ‚Ñï ‚Üí Œ† a, Œ≤ a` be a sequence of (dependent) functions on a topological space. Suppose
that the family of sets `s n = {x | f (n + 1) x ‚â† f n x}` is locally finite. Then there exists a
function `F : Œ† a, Œ≤ a` such that for any `x`, for sufficiently large values of `n`, we have
`f n y = F y` in a neighbourhood of `x`. -/
lemma exists_forall_eventually_at_top_eventually_eq' {œÄ : X ‚Üí Sort*}
  {f : ‚Ñï ‚Üí Œ† x : X, œÄ x} (hf : locally_finite (Œª n, {x | f (n + 1) x ‚â† f n x})) :
  ‚àÉ F : Œ† x : X, œÄ x, ‚àÄ x, ‚àÄ·∂† n : ‚Ñï in at_top, ‚àÄ·∂† y : X in ùìù x, f n y = F y :=
hf.exists_forall_eventually_eq_prod.imp $ Œª F hF x, (hF x).curry

/-- Let `f : ‚Ñï ‚Üí Œ± ‚Üí Œ≤` be a sequence of functions on a topological space. Suppose
that the family of sets `s n = {x | f (n + 1) x ‚â† f n x}` is locally finite. Then there exists a
function `F :  Œ± ‚Üí Œ≤` such that for any `x`, for sufficiently large values of `n`, we have
`f n =·∂†[ùìù x] F`. -/
lemma exists_forall_eventually_at_top_eventually_eq {f : ‚Ñï ‚Üí X ‚Üí Œ±}
  (hf : locally_finite (Œª n, {x | f (n + 1) x ‚â† f n x})) :
  ‚àÉ F : X ‚Üí Œ±, ‚àÄ x, ‚àÄ·∂† n : ‚Ñï in at_top, f n =·∂†[ùìù x] F :=
hf.exists_forall_eventually_at_top_eventually_eq'

lemma preimage_continuous {g : Y ‚Üí X} (hf : locally_finite f) (hg : continuous g) :
  locally_finite (Œª i, g ‚Åª¬π' (f i)) :=
Œª x, let ‚ü®s, hsx, hs‚ü© := hf (g x)
  in ‚ü®g ‚Åª¬π' s, hg.continuous_at hsx, hs.subset $ Œª i ‚ü®y, hy‚ü©, ‚ü®g y, hy‚ü©‚ü©

end locally_finite

@[simp] lemma equiv.locally_finite_comp_iff (e : Œπ' ‚âÉ Œπ) :
  locally_finite (f ‚àò e) ‚Üî locally_finite f :=
‚ü®Œª h, by simpa only [(‚àò), e.apply_symm_apply] using h.comp_injective e.symm.injective,
  Œª h, h.comp_injective e.injective‚ü©

lemma locally_finite_sum {f : Œπ ‚äï Œπ' ‚Üí set X} :
  locally_finite f ‚Üî locally_finite (f ‚àò sum.inl) ‚àß locally_finite (f ‚àò sum.inr) :=
by simp only [locally_finite_iff_small_sets, ‚Üê forall_and_distrib, ‚Üê finite_preimage_inl_and_inr,
  preimage_set_of_eq, (‚àò), eventually_and]

lemma locally_finite.sum_elim {g : Œπ' ‚Üí set X} (hf : locally_finite f) (hg : locally_finite g) :
  locally_finite (sum.elim f g) :=
locally_finite_sum.mpr ‚ü®hf, hg‚ü©

lemma locally_finite_option {f : option Œπ ‚Üí set X} :
  locally_finite f ‚Üî locally_finite (f ‚àò some) :=
begin
  simp only [‚Üê (equiv.option_equiv_sum_punit.{u} Œπ).symm.locally_finite_comp_iff,
    locally_finite_sum, locally_finite_of_finite, and_true],
  refl
end

lemma locally_finite.option_elim (hf : locally_finite f) (s : set X) :
  locally_finite (option.elim s f) :=
locally_finite_option.2 hf
