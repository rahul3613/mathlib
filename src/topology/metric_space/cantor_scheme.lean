/-
Copyright (c) 2023 Felix Weilacher. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Felix Weilacher
-/
import topology.metric_space.pi_nat

/-!
# (Topological) Schemes and their induced maps

> THIS FILE IS SYNCHRONIZED WITH MATHLIB4.
> Any changes to this file require a corresponding PR to mathlib4.

In topology, and especially descriptive set theory, one often constructs functions `(‚Ñï ‚Üí Œ≤) ‚Üí Œ±`,
where Œ± is some topological space and Œ≤ is a discrete space, as an appropriate limit of some map
`list Œ≤ ‚Üí set Œ±`. We call the latter type of map a "`Œ≤`-scheme on `Œ±`".

This file develops the basic, abstract theory of these schemes and the functions they induce.

## Main Definitions

* `cantor_scheme.induced_map A` : The aforementioned "limit" of a scheme `A : list Œ≤ ‚Üí set Œ±`.
  This is a partial function from `‚Ñï ‚Üí Œ≤` to `a`,
  implemented here as an object of type `Œ£ s : set (‚Ñï ‚Üí Œ≤), s ‚Üí Œ±`.
  That is, `(induced_map A).1` is the domain and `(induced_map A).2` is the function.

## Implementation Notes

We consider end-appending to be the fundamental way to build lists (say on `Œ≤`) inductively,
as this interacts better with the topology on `‚Ñï ‚Üí Œ≤`.
As a result, functions like `list.nth` or `stream.take` do not have their intended meaning
in this file. See instead `pi_nat.res`.

## References

* [kechris1995] (Chapters 6-7)

## Tags

scheme, cantor scheme, lusin scheme, approximation.

-/

namespace cantor_scheme

open list function filter set pi_nat
open_locale classical topology

variables {Œ≤ Œ± : Type*} (A : list Œ≤ ‚Üí set Œ±)

/-- From a `Œ≤`-scheme on `Œ±` `A`, we define a partial function from `(‚Ñï ‚Üí Œ≤)` to `Œ±`
which sends each infinite sequence `x` to an element of the intersection along the
branch corresponding to `x`, if it exists.
We call this the map induced by the scheme. -/
noncomputable def induced_map : Œ£ s : set (‚Ñï ‚Üí Œ≤), s ‚Üí Œ± :=
‚ü®Œª x, set.nonempty ‚ãÇ n : ‚Ñï, A (res x n), Œª x, x.property.some‚ü©

section topology

/-- A scheme is antitone if each set contains its children. -/
protected def antitone : Prop := ‚àÄ l : list Œ≤, ‚àÄ a : Œ≤, A (a :: l) ‚äÜ A l

/-- A useful strengthening of being antitone is to require that each set contains
the closure of each of its children. -/
def closure_antitone [topological_space Œ±] : Prop :=
‚àÄ l : list Œ≤, ‚àÄ a : Œ≤, closure (A (a :: l)) ‚äÜ A l

/-- A scheme is disjoint if the children of each set of pairwise disjoint. -/
protected def disjoint : Prop :=
‚àÄ l : list Œ≤, _root_.pairwise $ Œª a b, disjoint (A (a :: l)) (A (b :: l))

variable {A}

/-- If `x` is in the domain of the induced map of a scheme `A`,
its image under this map is in each set along the corresponding branch. -/
lemma map_mem (x : (induced_map A).1) (n : ‚Ñï) :
  (induced_map A).2 x ‚àà A (res x n) :=
begin
  have := x.property.some_mem,
  rw mem_Inter at this,
  exact this n,
end

protected lemma closure_antitone.antitone [topological_space Œ±] (hA : closure_antitone A) :
  cantor_scheme.antitone A :=
Œª l a, subset_closure.trans (hA l a)

protected lemma antitone.closure_antitone [topological_space Œ±] (hanti : cantor_scheme.antitone A)
  (hclosed : ‚àÄ l, is_closed (A l)) : closure_antitone A :=
Œª l a, (hclosed _).closure_eq.subset.trans (hanti _ _)

/-- A scheme where the children of each set are pairwise disjoint induces an injective map. -/
theorem disjoint.map_injective (hA : cantor_scheme.disjoint A) : injective (induced_map A).2 :=
begin
  rintros ‚ü®x, hx‚ü© ‚ü®y, hy‚ü© hxy,
  refine subtype.coe_injective (res_injective _),
  dsimp,
  ext n : 1,
  induction n with n ih, { simp },
  simp only [res_succ],
  refine ‚ü®_, ih‚ü©,
  contrapose hA,
  simp only [cantor_scheme.disjoint, _root_.pairwise, ne.def, not_forall, exists_prop],
  refine ‚ü®res x n, _, _, hA, _‚ü©,
  rw not_disjoint_iff,
  refine ‚ü®(induced_map A).2 ‚ü®x, hx‚ü©, _, _‚ü©,
  { rw ‚Üê res_succ,
    apply map_mem, },
  rw [hxy, ih, ‚Üê res_succ],
  apply map_mem,
end

end topology

section metric

variable [pseudo_metric_space Œ±]

variable (A)

/-- A scheme on a metric space has vanishing diameter if diameter approaches 0 along each branch. -/
def vanishing_diam : Prop :=
‚àÄ x : ‚Ñï ‚Üí Œ≤, tendsto (Œª n : ‚Ñï, emetric.diam (A (res x n))) at_top (ùìù 0)

variable {A}

lemma vanishing_diam.dist_lt (hA : vanishing_diam A) (Œµ : ‚Ñù) (Œµ_pos : 0 < Œµ) (x : ‚Ñï ‚Üí Œ≤) :
  ‚àÉ n : ‚Ñï, ‚àÄ y z ‚àà A (res x n), dist y z < Œµ :=
begin
  specialize hA x,
  rw ennreal.tendsto_at_top_zero at hA,
  cases hA (ennreal.of_real (Œµ / 2))
    (by { simp only [gt_iff_lt, ennreal.of_real_pos], linarith }) with n hn,
  use n,
  intros y hy z hz,
  rw [‚Üê ennreal.of_real_lt_of_real_iff Œµ_pos, ‚Üê edist_dist],
  apply lt_of_le_of_lt (emetric.edist_le_diam_of_mem hy hz),
  apply lt_of_le_of_lt (hn _ (le_refl _)),
  rw ennreal.of_real_lt_of_real_iff Œµ_pos,
  linarith,
end

/-- A scheme with vanishing diameter along each branch induces a continuous map. -/
theorem vanishing_diam.map_continuous [topological_space Œ≤] [discrete_topology Œ≤]
  (hA : vanishing_diam A) : continuous (induced_map A).2 :=
begin
  rw metric.continuous_iff',
  rintros ‚ü®x, hx‚ü© Œµ Œµ_pos,
  cases hA.dist_lt _ Œµ_pos x with n hn,
  rw _root_.eventually_nhds_iff,
  refine ‚ü®coe ‚Åª¬π' cylinder x n, _, _, by simp‚ü©,
  { rintros ‚ü®y, hy‚ü© hyx,
    rw [mem_preimage, subtype.coe_mk, cylinder_eq_res, mem_set_of] at hyx,
    apply hn,
    { rw ‚Üê hyx,
      apply map_mem, },
    apply map_mem, },
  apply continuous_subtype_coe.is_open_preimage,
  apply is_open_cylinder,
end

/-- A scheme on a complete space with vanishing diameter
such that each set contains the closure of its children
induces a total map. -/
theorem closure_antitone.map_of_vanishing_diam [complete_space Œ±]
  (hdiam : vanishing_diam A) (hanti : closure_antitone A) (hnonempty : ‚àÄ l, (A l).nonempty) :
  (induced_map A).1 = univ :=
begin
  rw eq_univ_iff_forall,
  intro x,
  choose u hu using Œª n, hnonempty (res x n),
  have umem : ‚àÄ n m : ‚Ñï, n ‚â§ m ‚Üí u m ‚àà A (res x n),
  { have : antitone (Œª n : ‚Ñï, A (res x n)),
    { refine antitone_nat_of_succ_le _,
      intro n,
      apply hanti.antitone, },
    intros n m hnm,
    exact this hnm (hu _), },
  have : cauchy_seq u,
  { rw metric.cauchy_seq_iff,
    intros Œµ Œµ_pos,
    cases hdiam.dist_lt _ Œµ_pos x with n hn,
    use n,
    intros m‚ÇÄ hm‚ÇÄ m‚ÇÅ hm‚ÇÅ,
    apply hn; apply umem; assumption, },
  cases cauchy_seq_tendsto_of_complete this with y hy,
  use y,
  rw mem_Inter,
  intro n,
  apply hanti _ (x n),
  apply mem_closure_of_tendsto hy,
  rw eventually_at_top,
  exact ‚ü®n.succ, umem _‚ü©,
end

end metric

end cantor_scheme
